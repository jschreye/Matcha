@* @using MudBlazor
@using Core.Data.DTOs
@using Core.Data.Entity

<MudDialog>
    <DialogContent>
        <MudContainer Style="max-height: 500px; overflow-y: auto;">
            <MudGrid>
                <!-- Slider pour l'âge -->
                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mb-2">Tranche d'âge</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">@MinAge ans - @MaxAge ans</MudText>
                    <MudSlider T="int" Min="18" Max="99" Value="@MinAge" ValueChanged="@((int val) => MinAge = val)" Class="my-2">
                        <ValueLabelContent>
                            @context
                        </ValueLabelContent>
                    </MudSlider>
                    <MudSlider T="int" Min="18" Max="99" Value="@MaxAge" ValueChanged="@((int val) => MaxAge = val)" Class="my-2">
                        <ValueLabelContent>
                            @context
                        </ValueLabelContent>
                    </MudSlider>
                </MudItem>
                
                <!-- Slider pour la popularité -->
                <MudItem xs="12" Class="mt-4">
                    <MudText Typo="Typo.h6" Class="mb-2">Popularité</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">@MinPopularity - @MaxPopularity</MudText>
                    <MudSlider T="int" Min="0" Max="100" Value="@MinPopularity" ValueChanged="@((int val) => MinPopularity = val)" Class="my-2">
                        <ValueLabelContent>
                            @context
                        </ValueLabelContent>
                    </MudSlider>
                    <MudSlider T="int" Min="0" Max="100" Value="@MaxPopularity" ValueChanged="@((int val) => MaxPopularity = val)" Class="my-2">
                        <ValueLabelContent>
                            @context
                        </ValueLabelContent>
                    </MudSlider>
                </MudItem>
                
                <!-- Slider pour le rayon de localisation -->
                <MudItem xs="12" Class="mt-4">
                    <MudText Typo="Typo.h6" Class="mb-2">Rayon de localisation</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">@MaxDistance km</MudText>
                    <MudSlider T="double" Min="0" Max="500" Step="10" Value="@MaxDistance" ValueChanged="@((double val) => MaxDistance = val)" Class="my-2">
                        <ValueLabelContent>
                            @context km
                        </ValueLabelContent>
                    </MudSlider>
                </MudItem>
                
                <!-- Sélecteur de tags -->
                <MudItem xs="12" Class="mt-4">
                    <MudText Typo="Typo.h6" Class="mb-2">Tags</MudText>
                    @if (AvailableTags != null && AvailableTags.Any())
                    {
                        <MudGrid>
                            @foreach (var tag in AvailableTags)
                            {
                                <MudItem xs="6" sm="4">
                                    <MudChip T="string" Color="@(SelectedTagIds.Contains(tag.Id) ? Color.Primary : Color.Default)"
                                             OnClick="@(() => ToggleTag(tag.Id))"
                                             Style="margin: 4px; border-radius: 20px; padding: 8px 16px; width: 100%; justify-content: center">
                                        <div class="d-flex align-center">
                                            @if (SelectedTagIds.Contains(tag.Id))
                                            {
                                                <MudIcon Icon="@Icons.Material.Filled.Check" Size="Size.Small" Class="mr-1" />
                                            }
                                            @tag.Libelle
                                        </div>
                                    </MudChip>
                                </MudItem>
                            }
                        </MudGrid>
                    }
                    else
                    {
                        <MudText Typo="Typo.body2" Color="Color.Error">Aucun tag disponible</MudText>
                    }
                </MudItem>
            </MudGrid>
        </MudContainer>
    </DialogContent>
    
    <DialogActions>
        <MudButton Variant="Variant.Text" Color="Color.Default" OnClick="Cancel">Annuler</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit" Class="ml-auto">Rechercher</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    
    [Parameter] public int MinAge { get; set; }
    [Parameter] public int MaxAge { get; set; }
    [Parameter] public int MinPopularity { get; set; }
    [Parameter] public int MaxPopularity { get; set; }
    [Parameter] public double MaxDistance { get; set; }
    [Parameter] public List<int> SelectedTagIds { get; set; }
    [Parameter] public List<Tag> AvailableTags { get; set; }
    
    protected override void OnInitialized()
    {
        // Si null, initialiser avec une liste vide
        SelectedTagIds ??= new List<int>();
        AvailableTags ??= new List<Tag>();
    }
    
    private void Submit()
    {
        var parameters = new Presentation.Pages.Search.Search.CustomSearchParameters
        {
            MinAge = MinAge,
            MaxAge = MaxAge,
            MinPopularity = MinPopularity,
            MaxPopularity = MaxPopularity,
            MaxDistance = MaxDistance,
            SelectedTagIds = SelectedTagIds
        };
        
        MudDialog.Close(parameters);
    }
    
    private void Cancel() => MudDialog.Cancel();
    
    private void ToggleTag(int tagId)
    {
        if (SelectedTagIds.Contains(tagId))
            SelectedTagIds.Remove(tagId);
        else
            SelectedTagIds.Add(tagId);
    }
}  *@