@namespace Presentation.Components.User
@using Core.Data.DTOs
@using MudBlazor
@inject NavigationManager NavigationManager
@inject IUserService UserService

<MudItem xs="@XsColumns" sm="@SmColumns" md="@MdColumns" Class="@Class">
    <MudPaper Elevation="@Elevation" Class="pa-2 pa-sm-4 rounded-lg relative">
        <MudGrid>
            <MudItem xs="4" Class="d-flex justify-center">
                @if (!string.IsNullOrWhiteSpace(ProfileImage))
                {
                    <div style="width: 65px; height: 65px; overflow: hidden; border-radius: 50%;" class="d-flex flex-column justify-center align-center">
                        <img src="@ProfileImage" alt="Photo de profil" 
                            style="width: 100%; height: 100%; object-fit: cover;" />
                    </div>
                }
                else
                {
                    <MudAvatar Color="Color.Primary" Style="width: 65px; height: 65px; font-size: 1.5rem;" Class="my-1">
                        @(User.Username.Length > 0 ? User.Username[0].ToString().ToUpper() : "?")
                    </MudAvatar>
                }
            </MudItem>
            <MudItem xs="8">
                <div class="d-flex flex-column">
                    <MudText Typo="Typo.body1" Class="font-weight-bold text-truncate">
                        @User.Username
                    </MudText>
                    
                    <div class="d-flex align-center mt-1">
                        @if (User.Age > 0)
                        {
                            <MudText Typo="Typo.body2">@User.Age ans</MudText>
                        }
                        else if (UserAge.HasValue)
                        {
                            <MudText Typo="Typo.body2">@UserAge ans</MudText>
                        }
                        else
                        {
                            <MudText Typo="Typo.body2" Color="Color.Tertiary">Âge non disponible</MudText>
                        }
                        
                        @if (UserGenre.HasValue)
                        {
                            <MudIcon Icon="@GetGenreIcon(UserGenre.Value)" 
                                    Size="Size.Small"
                                    Class="ml-2" 
                                    Color="@GetGenreColor(UserGenre.Value)" />
                        }
                    </div>
                </div>
            </MudItem>
            <MudItem xs="12" Class="d-flex justify-end mt-2">
                @if (CustomContent != null)
                {
                    @CustomContent
                }
                else
                {
                    <div class="d-flex">
                        @if (HasMatch)
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Chat"
                                        Color="Color.Tertiary"
                                        OnClick="() => NavigateToChat(User.Id)"
                                        Class="mx-1" />
                        }
                        
                        <MudIconButton Icon="@Icons.Material.Filled.Person"
                                    Color="Color.Primary"
                                    OnClick="() => ViewProfile(User.Id)"
                                    Class="mx-1" />
                    </div>
                }
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudItem>

@code {
    [Parameter]
    public UserDto User { get; set; } = new UserDto();

    [Parameter]
    public string ProfileImage { get; set; } = string.Empty;
    
    [Parameter]
    public int CurrentUserId { get; set; }

    [Parameter]
    public int XsColumns { get; set; } = 12;

    [Parameter]
    public int SmColumns { get; set; } = 6;
    
    [Parameter]
    public int MdColumns { get; set; } = 6;

    [Parameter]
    public int Elevation { get; set; } = 2;

    [Parameter]
    public string Class { get; set; } = "mb-2 mb-sm-3";

    [Parameter]
    public RenderFragment? CustomContent { get; set; }

    [Parameter]
    public EventCallback<int> OnProfileClick { get; set; }
    
    private bool HasMatch { get; set; } = false;
    private int? UserGenre { get; set; }
    private int? UserAge { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        if (User == null || User.Id <= 0)
            return;
            
        // Récupérer le profil utilisateur pour obtenir genre et âge
        var userProfile = await UserService.GetUserProfileAsync(User.Id);
        if (userProfile != null)
        {
            UserGenre = userProfile.Genre;
            
            // Si l'âge n'est pas défini dans User mais présent dans UserProfile
            if (User.Age <= 0 && userProfile.Age > 0)
            {
                UserAge = userProfile.Age;
            }
        }
        
        // Vérifier s'il y a un match entre l'utilisateur actuel et cet utilisateur
        if (CurrentUserId > 0)
        {
            HasMatch = await UserService.HasMatchWithUserAsync(CurrentUserId, User.Id);
        }
    }

    private void ViewProfile(int userId)
    {
        if (OnProfileClick.HasDelegate)
        {
            OnProfileClick.InvokeAsync(userId);
        }
        else
        {
            NavigationManager.NavigateTo($"/profile/{userId}");
        }
    }
    
    private void NavigateToChat(int userId)
    {
        NavigationManager.NavigateTo($"/chat/{userId}");
    }
    
    private string GetGenreIcon(int genre)
    {
        return genre switch
        {
            1 => Icons.Material.Filled.Male,
            2 => Icons.Material.Filled.Female,
            _ => Icons.Material.Filled.Help
        };
    }
    
    private Color GetGenreColor(int genre)
    {
        return genre switch
        {
            1 => Color.Info,
            2 => Color.Secondary,
            _ => Color.Default
        };
    }
} 