@page "/reset-password"
@using Core.Repository
@inject IUserRepository UserRepository
@inject IPasswordHasher PasswordHasher
@inject NavigationManager Navigation

<h3>Réinitialiser le mot de passe</h3>
<p>@message</p>

@if (!isPasswordReset)
{
    <InputText @bind-Value="newPassword" placeholder="Nouveau mot de passe" type="password" />
    <button @onclick="PerformResetPassword">Changer le mot de passe</button>
}

@code {
    [Parameter, SupplyParameterFromQuery] public string email { get; set; }
    [Parameter, SupplyParameterFromQuery] public string token { get; set; }

    private string newPassword;
    private string message = "Veuillez entrer un nouveau mot de passe.";
    private bool isPasswordReset = false;

    private async Task PerformResetPassword()
    {
        if (string.IsNullOrEmpty(email) || string.IsNullOrEmpty(token) || string.IsNullOrEmpty(newPassword))
        {
            message = "Tous les champs sont obligatoires.";
            return;
        }

        var user = await UserRepository.GetByEmail(email);
        if (user == null)
        {
            message = "Utilisateur non trouvé.";
            return;
        }

        if (user.PasswordResetToken != token)
        {
            message = "Jeton invalide.";
            return;
        }

        user.PasswordHash = PasswordHasher.HashPassword(newPassword);
        user.PasswordResetToken = null;
        await UserRepository.Update(user);

        message = "Mot de passe réinitialisé avec succès !";
        isPasswordReset = true;
        await Task.Delay(2000);
        Navigation.NavigateTo("/login", forceLoad: true);
    }
}