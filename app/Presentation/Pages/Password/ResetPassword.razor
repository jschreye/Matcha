@page "/reset-password"
@using Core.Interfaces.Repository
@using Core.Interfaces.Services
@inject IUserRepository UserRepository
@inject IPasswordHasher PasswordHasher
@inject NavigationManager Navigation
@inject IAlertService AlertService
@inject IValidationService ValidationService

<MudText Typo="Typo.h3">Réinitialiser le mot de passe</MudText>

<MudForm @ref="form" @bind-IsValid="@isFormValid"  Outlined="true">
    <!-- Nouveau mot de passe -->
    <MudTextField T="string" Label="Nouveau mot de passe" Variant="Variant.Outlined" InputType="InputType.Password"
                  HelperText="Choisissez un mot de passe fort"
                  Required="true" RequiredError="Le mot de passe est requis"
                  @bind-Value="newPassword" />

    <!-- Confirmation du mot de passe -->
    <MudTextField T="string" Label="Confirmer le mot de passe" Variant="Variant.Outlined"
                    InputType="InputType.Password"
                    @bind-Value="confirmPassword" />

    <!-- Boutons -->
    <div class="d-flex justify-content-end">
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" Disabled="@(!isFormValid)" OnClick="PerformResetPassword">
            Changer le mot de passe
        </MudButton>
    </div>
</MudForm>

@code {
    [Parameter, SupplyParameterFromQuery] public string? email { get; set; }
    [Parameter, SupplyParameterFromQuery] public string? token { get; set; }
    private string confirmPassword;
    private string newPassword;
    private bool isFormValid;
    private MudForm? form;

    private async Task PerformResetPassword()
    {
        if (!isFormValid)
        {
            AlertService.ShowMessage("Veuillez remplir correctement le formulaire.", false);
            return;
        }

        var user = await UserRepository.GetByEmail(email);
        if (user == null)
        {
            AlertService.ShowMessage("Utilisateur non trouvé.", false);
            return;
        }

        if (user.PasswordResetToken != token)
        {
            AlertService.ShowMessage("Jeton invalide.", false);
            return;
        }

        // Valider le nouveau mot de passe
        var passwordErrors = ValidationService.ValidatePassword(newPassword);
        if (passwordErrors.Any())
        {
            foreach (var error in passwordErrors)
            {
                AlertService.ShowMessage(error, false);
            }
            return;
        }

        // Valider la correspondance des mots de passe
        if (newPassword != confirmPassword)
        {
            AlertService.ShowMessage("Les mots de passe ne correspondent pas.", false);
            return;
        }

        // Si tout est valide, procéder à la réinitialisation du mot de passe
        try
        {
            user.PasswordHash = PasswordHasher.HashPassword(newPassword);
            user.PasswordResetToken = null;
            await UserRepository.Update(user);

            AlertService.ShowMessage("Mot de passe réinitialisé avec succès !", true);
            Navigation.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            AlertService.ShowMessage($"Erreur lors de la réinitialisation du mot de passe : {ex.Message}", false);
        }
    }

    @* private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Le mot de passe est requis !";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Le mot de passe doit contenir au moins 8 caractères.";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Le mot de passe doit contenir au moins une majuscule.";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Le mot de passe doit contenir au moins une minuscule.";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Le mot de passe doit contenir au moins un chiffre.";
    }

    private string PasswordMatch(string arg)
    {
        if (newPassword != arg)
            return "Les mots de passe ne correspondent pas.";
        return null;
    } *@
}