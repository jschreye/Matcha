@page "/reset-password"
@using Core.Interfaces.Repository
@using Core.Interfaces.Services
@inject IUserRepository UserRepository
@inject IPasswordHasher PasswordHasher
@inject NavigationManager Navigation

<MudText Typo="Typo.h3">Réinitialiser le mot de passe</MudText>

<MudForm @ref="form" @bind-IsValid="@isFormValid" @bind-Errors="@errors" Outlined="true">
    <!-- Nouveau mot de passe -->
    <MudTextField T="string" Label="Nouveau mot de passe" Variant="Variant.Outlined" InputType="InputType.Password"
                  HelperText="Choisissez un mot de passe fort"
                  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))"
                  Required="true" RequiredError="Le mot de passe est requis" @bind-Value="newPassword" />

    <!-- Confirmation du mot de passe -->
    <MudTextField T="string" Label="Confirmer le mot de passe" Variant="Variant.Outlined"
                    InputType="InputType.Password"
                    Validation="@(new Func<string, string>(PasswordMatch))" />

    <!-- Boutons -->
    <div class="d-flex justify-content-end">
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" Disabled="@(!isFormValid)" OnClick="PerformResetPassword">
            Changer le mot de passe
        </MudButton>
    </div>
</MudForm>

@if (!string.IsNullOrEmpty(message))
{
    <MudAlert class="mt-5" Severity="@(operationSuccess ? Severity.Success : Severity.Error)" Elevation="2">
        @message
    </MudAlert>
}

@code {
    [Parameter, SupplyParameterFromQuery] public string email { get; set; }
    [Parameter, SupplyParameterFromQuery] public string token { get; set; }

    private string newPassword;
    private string message = string.Empty;
    private bool isFormValid;
    private bool operationSuccess;
    private string[] errors = { };
    private MudForm form;
    private MudTextField<string> pwField1;

    private async Task PerformResetPassword()
    {
        if (!isFormValid)
        {
            message = "Veuillez remplir correctement le formulaire.";
            operationSuccess = false;
            return;
        }

        var user = await UserRepository.GetByEmail(email);
        if (user == null)
        {
            message = "Utilisateur non trouvé.";
            operationSuccess = false;
            return;
        }

        if (user.PasswordResetToken != token)
        {
            message = "Jeton invalide.";
            operationSuccess = false;
            return;
        }

        user.PasswordHash = PasswordHasher.HashPassword(newPassword);
        user.PasswordResetToken = null;
        await UserRepository.Update(user);

        message = "Mot de passe réinitialisé avec succès !";
        operationSuccess = true;
        await Task.Delay(2000);
        Navigation.NavigateTo("/login", forceLoad: true);
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Le mot de passe est requis !";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Le mot de passe doit contenir au moins 8 caractères.";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Le mot de passe doit contenir au moins une majuscule.";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Le mot de passe doit contenir au moins une minuscule.";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Le mot de passe doit contenir au moins un chiffre.";
    }

    private string PasswordMatch(string arg)
    {
        if (newPassword != arg)
            return "Les mots de passe ne correspondent pas.";
        return null;
    }
}