@page "/profile/{UserId:int}"
@using Core.Data.DTOs
@using Core.Data.Entity
@using System.Security.Claims
@using Core.Interfaces.Services
@using MudBlazor
@inject IUserService UserService
@inject IVisitService VisitService
@inject IPhotoService PhotoService
@inject IBlockReportService BlockReportService
@inject INotificationService NotificationService
@inject ILikeService LikeService
@inject ITagService TagService
@inject IGenreService GenreService
@inject IPrefSexService PrefSexService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IAlertService AlertService

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    @if (_loading)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
    }
    else if (_userProfile == null)
    {
        <MudAlert Severity="Severity.Error">Utilisateur non trouvé.</MudAlert>
    }
    else
    {
        <MudPaper Elevation="3" Class="pa-6 rounded-lg">
            <!-- En-tête du profil avec avatar et nom -->
            <div class="d-flex flex-column align-center mb-6">
                @if (profilePhoto != null)
                {
                    <div style="width: 150px; height: 150px; overflow: hidden; border-radius: 50%;" class="mb-3 mud-elevation-3">
                        <img src="@profilePhoto" alt="Photo de profil" style="width: 100%; height: 100%; object-fit: cover;" />
                    </div>
                }
                else
                {
                    <MudAvatar Size="Size.Large" Style="width: 150px; height: 150px; font-size: 3rem;" Color="Color.Primary" Class="mb-3 mud-elevation-3">
                        <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Large" />
                    </MudAvatar>
                }
                
                <MudText Typo="Typo.h4" Class="mb-1">@_userProfile.Username</MudText>
                
                @if (_isProfileOnline)
                {
                    <MudText Color="Color.Success" Typo="Typo.subtitle2" Class="mb-2">● En ligne</MudText>
                }
                else
                {
                    <MudText Color="Color.Secondary" Typo="Typo.subtitle2" Class="mb-2">
                        ● Hors ligne
                        @if (_lastActivity.HasValue)
                        {
                            <span> - Dernière connexion : @_lastActivity.Value.ToString("dd/MM/yyyy HH:mm")</span>
                        }
                    </MudText>
                }
                
                <MudText Typo="Typo.subtitle1" Class="mb-2">Score de popularité: @_userProfile.PopularityScore</MudText>
                <MudRating SelectedValue="@CalculateStarRating(_userProfile.PopularityScore)" ReadOnly="true" Class="mb-2" />
                
                <!-- Actions -->
                <div class="d-flex justify-center mt-2">
                    <MudButton Color="@(_hasLiked ? Color.Secondary : Color.Primary)"
                               Variant="Variant.Filled"
                               StartIcon="@Icons.Material.Filled.Favorite"
                               Disabled="isBlocked"
                               Class="mx-1"
                               OnClick="ToggleLike">
                        @_likeButtonLabel
                    </MudButton>

                    <MudButton Color="@(isBlocked ? Color.Default : Color.Error)"
                               Variant="Variant.Outlined"
                               Size="Size.Small"
                               Class="mx-1"
                               OnClick="ToggleBlock">
                        @(isBlocked ? "Débloquer" : "Bloquer")
                    </MudButton>

                    <MudButton Color="Color.Warning"
                               Variant="Variant.Outlined"
                               Size="Size.Small"
                               Class="mx-1"
                               OnClick="ReportUser">
                        Signaler
                    </MudButton>
                </div>
            </div>

            <MudDivider Class="my-4" />
            
            <!-- Informations personnelles -->
            <MudText Typo="Typo.h5" Class="mb-3">Informations personnelles</MudText>
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudPaper Elevation="0" Class="pa-3 d-flex align-center">
                        <MudIcon Icon="@Icons.Material.Filled.Person" Class="mr-2" Color="Color.Primary" />
                        <MudText>@_userProfile.Firstname @_userProfile.Lastname</MudText>
                    </MudPaper>
                </MudItem>
                
                <MudItem xs="12" sm="6">
                    <MudPaper Elevation="0" Class="pa-3 d-flex align-center">
                        <MudIcon Icon="@Icons.Material.Filled.Cake" Class="mr-2" Color="Color.Primary" />
                        <MudText>@_userProfile.Age ans</MudText>
                    </MudPaper>
                </MudItem>
                
                <MudItem xs="12" sm="6">
                    <MudPaper Elevation="0" Class="pa-3 d-flex align-center">
                        @{
                            var isUserMale = _userProfile.Genre == 1;
                            var genderIconColor = isUserMale ? Color.Info : Color.Secondary;
                        }
                        <div class="d-flex align-center">
                            <MudIcon Icon="@(isUserMale ? Icons.Material.Filled.Male : Icons.Material.Filled.Female)" 
                                     Class="mr-2" Color="@genderIconColor" />
                            <MudText>@GetGenreLibelle(_userProfile.Genre)</MudText>
                        </div>
                    </MudPaper>
                </MudItem>
                
                <MudItem xs="12" sm="6">
                    <MudPaper Elevation="0" Class="pa-3 d-flex align-center">
                        @{
                            var prefSex = _userProfile.SexualPreferences;
                            var isUserMale = _userProfile.Genre == 1;
                            // Hetero = 1, Gay = 2, Bi = 3
                        }
                        <div class="d-flex align-center">
                            @if (prefSex == 1) // Hétéro
                            {
                                <MudIcon Icon="@(isUserMale ? Icons.Material.Outlined.Female : Icons.Material.Outlined.Male)" 
                                        Class="mr-1" />
                                <MudIcon Icon="@(isUserMale ? Icons.Material.Outlined.Female : Icons.Material.Outlined.Male)" 
                                        Class="mr-2" />
                            }
                            else if (prefSex == 2) // Gay
                            {
                                <MudIcon Icon="@(isUserMale ? Icons.Material.Outlined.Male : Icons.Material.Outlined.Female)" 
                                        Class="mr-1" />
                                <MudIcon Icon="@(isUserMale ? Icons.Material.Outlined.Male : Icons.Material.Outlined.Female)" 
                                        Class="mr-2" />
                            }
                            else if (prefSex == 3) // Bi
                            {
                                <MudIcon Icon="@Icons.Material.Outlined.Male" Class="mr-1" />
                                <MudIcon Icon="@Icons.Material.Outlined.Female" Class="mr-2" />
                            }
                            <MudText>@GetPrefSexLibelle(_userProfile.SexualPreferences)</MudText>
                        </div>
                    </MudPaper>
                </MudItem>
            </MudGrid>
            
            <MudDivider Class="my-4" />
            
            <!-- Biographie -->
            <MudText Typo="Typo.h5" Class="mb-3">Biographie</MudText>
            <MudPaper Elevation="0" Class="pa-3 mb-4">
                <MudText>@(_userProfile.Biography ?? "Aucune biographie disponible.")</MudText>
            </MudPaper>
            
            <MudDivider Class="my-4" />
            
            <!-- Centres d'intérêt -->
            <MudText Typo="Typo.h5" Class="mb-3">Centres d'intérêt</MudText>
            @if (_userTags.Any())
            {
                <MudPaper Elevation="0" Class="pa-3 mb-4">
                    <MudChipSet T="string">
                        @foreach (var tag in _userTags)
                        {
                            <MudChip T="string" Variant="Variant.Outlined" Color="Color.Primary">@tag</MudChip>
                        }
                    </MudChipSet>
                </MudPaper>
            }
            else
            {
                <MudPaper Elevation="0" Class="pa-3 mb-4">
                    <MudText Class="mud-text-secondary">Aucun centre d'intérêt renseigné.</MudText>
                </MudPaper>
            }
            
            <MudDivider Class="my-4" />
            
            <!-- Photos -->
            @if (_photos.Any())
            {
                <MudText Typo="Typo.h5" Class="mb-3">Photos</MudText>
                <MudCarousel TData="string" Class="mb-4" Style="height:400px" 
                             ShowArrows="true" ShowDelimiters="true" AutoCycle="false" EnableSwipeGesture="true">
                    @foreach (var photo in _photos)
                    {
                        <MudCarouselItem>
                            <div class="d-flex justify-center" style="height:100%">
                                <img src="@photo" alt="Photo" style="max-height:100%; max-width:100%; object-fit:contain" />
                            </div>
                        </MudCarouselItem>
                    }
                </MudCarousel>
            }
        </MudPaper>
    }
</MudContainer>

@code {
    [Parameter] public int UserId { get; set; }

    private int currentUserId;
    private UserProfileDto? _userProfile;
    private string? profilePhoto = null;
    private List<string> _photos = new();
    private List<string> _userTags = new();
    private List<Genre> _genres = new();
    private List<PrefSex> _prefSexes = new();
    private bool _loading = true;
    private bool _hasLiked;
    private bool isBlocked;
    private DateTime? _lastActivity;
    private string _likeButtonLabel => _hasLiked ? "Profil layqué" : "Layquer ce profil";
    private bool _isProfileOnline;
    
    protected override async Task OnInitializedAsync()
    {
        // Récupérer l'utilisateur courant
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _isProfileOnline = await UserService.IsUserOnlineAsync(UserId);
        if (!_isProfileOnline)
            _lastActivity = await UserService.GetLastActivityAsync(UserId);

        if (!int.TryParse(user.FindFirstValue(ClaimTypes.NameIdentifier), out currentUserId))
        {
            NavigationManager.NavigateTo("/login", forceLoad: true);
            return;
        }

        // Charger genres/préfs
        _genres    = await GenreService.GetGenresAsync();
        _prefSexes = await PrefSexService.GetPrefSexAsync();

        // Charger le profil
        _userProfile = await UserService.GetUserProfileAsync(UserId);
        if (_userProfile == null)
        {
            _loading = false;
            return;
        }

        // Enregistrer la visite et notifier
        if (currentUserId != UserId)
        {
            await VisitService.RecordVisitAsync(currentUserId, UserId);
            if (!await BlockReportService.HasBlockBetweenAsync(currentUserId, UserId))
                await NotificationService.NotifyVisitPofileAsync(UserId, currentUserId);
        }

        // Charger tags, photos et états
        _userTags  = await TagService.GetTagNamesForUserAsync(UserId);
        await LoadPhotosAsync();
        _hasLiked  = await LikeService.HasLikedAsync(currentUserId, UserId);
        isBlocked  = await BlockReportService.IsBlockedAsync(currentUserId, UserId);

        _loading = false;
    }

    private async Task LoadPhotosAsync()
    {
        // 1. Récupérer la photo de profil
        var profilePhotoObj = await PhotoService.GetProfilePhotoAsync(UserId);
        if (profilePhotoObj?.ImageData != null && profilePhotoObj.ImageData.Length > 0)
        {
            profilePhoto = $"data:image/jpeg;base64,{Convert.ToBase64String(profilePhotoObj.ImageData)}";
        }
        
        // 2. Récupérer les autres photos (qui ne sont pas des photos de profil)
        var photos = await PhotoService.GetUserPhotosAsync(UserId);
        _photos = photos
            .Where(p => p.ImageData?.Length > 0)
            .Select(p => $"data:image/jpeg;base64,{Convert.ToBase64String(p.ImageData!)}")
            .ToList();
    }

    private bool _isHandlingLike;

    private async Task ToggleLike()
    {
        var profilePhoto = await PhotoService.GetProfilePhotoAsync(currentUserId);
        // éviter les clics en double
        if (profilePhoto == null)
        {
            AlertService.ShowMessage("Vous ne pouvez pas layquer tant que votre photo de profile est vide", false);
            return;
        }
        if (_isHandlingLike) return;
        _isHandlingLike = true;

        if (_hasLiked)
        {
            await LikeService.UnlikeProfileAsync(currentUserId, UserId);
            _hasLiked = false;
            await NotificationService.NotifyProfileUnLikedAsync(UserId, currentUserId);
        }
        else
        {
            var isMatch = await LikeService.LikeProfileAsync(currentUserId, UserId);
            _hasLiked = true;

            // 1) notif Like
            await NotificationService.NotifyProfileLikedAsync(UserId, currentUserId);

            // 2) si match, notif EXACTEMENT une seule fois chacun
            if (isMatch)
            {
                // seulement la notif de match
                await NotificationService.NotifyMatchAsync(UserId, currentUserId);
            }
            else
            {
                // simple like
                await NotificationService.NotifyProfileLikedAsync(UserId, currentUserId);
            }
        }

        _isHandlingLike = false;
    }

    private async Task ToggleBlock()
    {
        if (isBlocked)
        {
            // Débloquer
            await BlockReportService.UnblockUserAsync(currentUserId, UserId);
        }
        else
        {
            // Si liké, retirer le like
            if (_hasLiked)
            {
                await LikeService.UnlikeProfileAsync(currentUserId, UserId);
                await NotificationService.NotifyProfileUnLikedAsync(UserId, currentUserId);
                _hasLiked = false;
            }
            // Bloquer
            await BlockReportService.BlockUserAsync(currentUserId, UserId);
        }
        isBlocked = !isBlocked;
    }

    private async Task ReportUser()
    {
        var reason = await JS.InvokeAsync<string>("prompt", "Raison du signalement :");
        if (!string.IsNullOrWhiteSpace(reason))
        {
            await BlockReportService.ReportUserAsync(currentUserId, UserId, reason);
            // Optionnel : toast de confirmation
        }
    }

    private string GetGenreLibelle(int? genreId) =>
        genreId.HasValue
            ? _genres.FirstOrDefault(g => g.Id == genreId)?.Libelle ?? "Non spécifié"
            : "Non spécifié";

    private string GetPrefSexLibelle(int? prefSexId) =>
        prefSexId.HasValue
            ? _prefSexes.FirstOrDefault(p => p.Id == prefSexId)?.Libelle ?? "Non spécifié"
            : "Non spécifié";
            
    private int CalculateStarRating(int popularityScore)
    {
        // Convertir le score de popularité en notation d'étoiles (1-5)
        return Math.Min(5, Math.Max(1, (int)Math.Ceiling(popularityScore / 20.0)));
    }
}