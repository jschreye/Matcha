@page "/profile/{UserId:int}"
@using Core.Data.DTOs
@using Core.Data.Entity
@using System.Security.Claims
@using Core.Interfaces.Services
@using MudBlazor
@inject IUserService UserService
@inject IVisitService VisitService
@inject IPhotoService PhotoService
@inject IBlockReportService BlockReportService
@inject INotificationService NotificationService
@inject ILikeService LikeService
@inject ITagService TagService
@inject IGenreService GenreService
@inject IPrefSexService PrefSexService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    @if (_loading)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
    }
    else if (_userProfile == null)
    {
        <MudAlert Severity="Severity.Error">Utilisateur non trouvé.</MudAlert>
    }
    else
    {
        <MudPaper Elevation="3" Class="p-4">
            <MudGrid>

                <!-- Header -->
                <MudItem xs="12" Class="text-center">
                    <MudText Typo="Typo.h4">Profil de @_userProfile.Username</MudText>
                </MudItem>

                <!-- Photos -->
                <MudItem xs="12" Class="text-center my-2">
                    @if (_photos.Any())
                    {
                        <MudCarousel TData="string" Class="mb-3" Style="height:300px">
                            @foreach (var photo in _photos)
                            {
                                <MudCarouselItem Style="height:90%">
                                    <div class="d-flex align-center justify-center" style="height:90%; width:100%">
                                        <img src="@photo" alt="Photo" style="max-height:90%; object-fit:contain" />
                                    </div>
                                </MudCarouselItem>
                            }
                        </MudCarousel>
                    }
                    else
                    {
                        <MudAvatar Size="Size.Large" Color="Color.Primary" Class="mx-auto">
                            <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Large" />
                        </MudAvatar>
                    }
                </MudItem>

                <!-- Actions: Like / Block / Report -->
                <MudItem xs="12" Class="text-center mb-4">
                    <MudButton Color="@(_hasLiked ? Color.Secondary : Color.Primary)"
                               Variant="Variant.Filled"
                               StartIcon="@Icons.Material.Filled.Favorite"
                               Disabled="isBlocked"
                               Class="mx-1"
                               OnClick="ToggleLike">
                        @_likeButtonLabel
                    </MudButton>

                    <MudButton Color="@(isBlocked ? Color.Default : Color.Error)"
                               Variant="Variant.Outlined"
                               Size="Size.Small"
                               Class="mx-1"
                               OnClick="ToggleBlock">
                        @(isBlocked ? "Débloquer" : "Bloquer")
                    </MudButton>

                    <MudButton Color="Color.Warning"
                               Variant="Variant.Outlined"
                               Size="Size.Small"
                               Class="mx-1"
                               OnClick="ReportUser">
                        Signaler
                    </MudButton>
                </MudItem>

                <!-- Details panels -->
                <MudItem xs="12">
                    <MudExpansionPanels Elevation="1" Class="mb-4">

                        <MudExpansionPanel Text="Informations personnelles">
                            <MudList T="string" Dense="true">
                                <MudListItem T="string">Prénom : @_userProfile.Firstname</MudListItem>
                                <MudListItem T="string">Nom : @_userProfile.Lastname</MudListItem>
                                <MudListItem T="string">Âge : @_userProfile.Age</MudListItem>
                                <MudListItem T="string">Genre : @GetGenreLibelle(_userProfile.Genre)</MudListItem>
                                <MudListItem T="string">Préférences : @GetPrefSexLibelle(_userProfile.SexualPreferences)</MudListItem>
                            </MudList>
                        </MudExpansionPanel>

                        <MudExpansionPanel Text="Biographie">
                            <MudText>@(_userProfile.Biography ?? "Aucune biographie disponible.")</MudText>
                        </MudExpansionPanel>

                        <MudExpansionPanel Text="Centres d'intérêt">
                            @if (_userTags.Any())
                            {
                                <MudChipSet T="string">
                                    @foreach (var tag in _userTags)
                                    {
                                        <MudChip T="string" Variant="Variant.Outlined">@tag</MudChip>
                                    }
                                </MudChipSet>
                            }
                            else
                            {
                                <MudText Class="text-muted">Aucun tag renseigné.</MudText>
                            }
                        </MudExpansionPanel>

                        <MudExpansionPanel Text="Statistiques">
                            <MudList T="string" Dense="true">
                                <MudListItem T="string">Popularité : @_userProfile.PopularityScore</MudListItem>
                            </MudList>
                        </MudExpansionPanel>

                    </MudExpansionPanels>
                </MudItem>

            </MudGrid>
        </MudPaper>
    }
</MudContainer>

@code {
    [Parameter] public int UserId { get; set; }

    private int currentUserId;
    private UserProfileDto? _userProfile;
    private List<string> _photos = new();
    private List<string> _userTags = new();
    private List<Genre> _genres = new();
    private List<PrefSex> _prefSexes = new();
    private bool _loading = true;
    private bool _hasLiked;
    private bool isBlocked;

    private string _likeButtonLabel => _hasLiked ? "Profil liké" : "Liker ce profil";

    protected override async Task OnInitializedAsync()
    {
        // Récupérer l’utilisateur courant
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (!int.TryParse(user.FindFirstValue(ClaimTypes.NameIdentifier), out currentUserId))
        {
            NavigationManager.NavigateTo("/login", forceLoad: true);
            return;
        }

        // Charger genres/préfs
        _genres    = await GenreService.GetGenresAsync();
        _prefSexes = await PrefSexService.GetPrefSexAsync();

        // Charger le profil
        _userProfile = await UserService.GetUserProfileAsync(UserId);
        if (_userProfile == null)
        {
            _loading = false;
            return;
        }

        // Enregistrer la visite et notifier
        if (currentUserId != UserId)
        {
            await VisitService.RecordVisitAsync(currentUserId, UserId);
            if (!await BlockReportService.HasBlockBetweenAsync(currentUserId, UserId))
                await NotificationService.NotifyVisitPofileAsync(UserId, currentUserId);
        }

        // Charger tags, photos et états
        _userTags  = await TagService.GetTagNamesForUserAsync(UserId);
        await LoadPhotosAsync();
        _hasLiked  = await LikeService.HasLikedAsync(currentUserId, UserId);
        isBlocked  = await BlockReportService.IsBlockedAsync(currentUserId, UserId);

        _loading = false;
    }

    private async Task LoadPhotosAsync()
    {
        var photos = await PhotoService.GetUserPhotosAsync(UserId);
        _photos = photos
            .Where(p => p.ImageData?.Length > 0)
            .Select(p => $"data:image/jpeg;base64,{Convert.ToBase64String(p.ImageData!)}")
            .ToList();
    }

    private bool _isHandlingLike;

    private async Task ToggleLike()
    {
        // éviter les clics en double
        if (_isHandlingLike) return;
        _isHandlingLike = true;

        if (_hasLiked)
        {
            await LikeService.UnlikeProfileAsync(currentUserId, UserId);
            _hasLiked = false;
            await NotificationService.NotifyProfileUnLikedAsync(UserId, currentUserId);
        }
        else
        {
            var isMatch = await LikeService.LikeProfileAsync(currentUserId, UserId);
            _hasLiked = true;

            // 1) notif Like
            await NotificationService.NotifyProfileLikedAsync(UserId, currentUserId);

            // 2) si match, notif EXACTEMENT une seule fois chacun
            if (isMatch)
            {
                // seulement la notif de match
                await NotificationService.NotifyMatchAsync(UserId, currentUserId);
            }
            else
            {
                // simple like
                await NotificationService.NotifyProfileLikedAsync(UserId, currentUserId);
            }
        }

        _isHandlingLike = false;
    }

    private async Task ToggleBlock()
    {
        if (isBlocked)
        {
            // Débloquer
            await BlockReportService.UnblockUserAsync(currentUserId, UserId);
        }
        else
        {
            // Si liké, retirer le like
            if (_hasLiked)
            {
                await LikeService.UnlikeProfileAsync(currentUserId, UserId);
                await NotificationService.NotifyProfileUnLikedAsync(UserId, currentUserId);
                _hasLiked = false;
            }
            // Bloquer
            await BlockReportService.BlockUserAsync(currentUserId, UserId);
        }
        isBlocked = !isBlocked;
    }

    private async Task ReportUser()
    {
        var reason = await JS.InvokeAsync<string>("prompt", "Raison du signalement :");
        if (!string.IsNullOrWhiteSpace(reason))
        {
            await BlockReportService.ReportUserAsync(currentUserId, UserId, reason);
            // Optionnel : toast de confirmation
        }
    }

    private string GetGenreLibelle(int? genreId) =>
        genreId.HasValue
            ? _genres.FirstOrDefault(g => g.Id == genreId)?.Libelle ?? "Non spécifié"
            : "Non spécifié";

    private string GetPrefSexLibelle(int? prefSexId) =>
        prefSexId.HasValue
            ? _prefSexes.FirstOrDefault(p => p.Id == prefSexId)?.Libelle ?? "Non spécifié"
            : "Non spécifié";
}