@page "/profile/{UserId:int}"
@using Core.Data.DTOs
@using System.Security.Claims
@using Core.Interfaces.Services
@inject IUserService UserService
@inject IVisitService VisitService
@inject IPhotoService PhotoService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject ITagService TagService
@inject IGenreService GenreService
@inject IPrefSexService PrefSex
@inject ILikeService LikeService
@inject INotificationService NotificationService

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    @if (_loading)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
    }
    else if (_userProfile == null)
    {
        <MudAlert Severity="Severity.Error">Utilisateur non trouvé.</MudAlert>
    }
    else
    {
        <MudPaper Elevation="3" Class="p-4">
            <MudGrid>
                <MudItem xs="12" Class="text-center">
                    <MudText Typo="Typo.h4">Profil de @_userProfile.Username</MudText>
                </MudItem>

                <MudItem xs="12" Class="text-center my-2">
                    @if (_photos?.Any() == true)
                    {
                        <MudCarousel TData="string" Class="mb-3" Style="height: 300px;">
                            @foreach (var photo in _photos)
                            {
                                <MudCarouselItem Style="height: 90%;">
                                    <div style="height: 90%; width: 100%; display: flex; align-items: center; justify-content: center;">
                                        <img src="@photo"
                                             alt="Photo"
                                             style="max-height: 90%; width: auto; object-fit: contain;" />
                                    </div>
                                </MudCarouselItem>
                            }
                        </MudCarousel>
                    }
                    else
                    {
                        <MudAvatar Style="height: 150px; width: 150px;" Color="Color.Primary">
                            <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Large" />
                        </MudAvatar>
                    }
                </MudItem>

                <MudItem xs="12" Class="text-center mb-4">
                    <MudButton Color="@(_hasLiked ? Color.Secondary : Color.Primary)"
                               Variant="Variant.Filled"
                               StartIcon="@Icons.Material.Filled.Favorite"
                               OnClick="ToggleLike">
                        @_likeButtonLabel
                    </MudButton>
                </MudItem>

                <MudItem xs="12">
                    <MudExpansionPanels Elevation="1" Class="mb-4">

                        <MudExpansionPanel Text="Informations personnelles">
                            <MudList T="string" Dense="true">
                                <MudListItem T="string">Prénom : @_userProfile.Firstname</MudListItem>
                                <MudListItem T="string">Nom : @_userProfile.Lastname</MudListItem>
                                <MudListItem T="string">Âge : @_userProfile.Age</MudListItem>
                                <MudListItem T="string">Genre : @GetGenreLibelle(_userProfile.Genre)</MudListItem>
                                <MudListItem T="string">Préférences : @GetPrefSexLibelle(_userProfile.SexualPreferences)</MudListItem>
                            </MudList>
                        </MudExpansionPanel>

                        <MudExpansionPanel Text="Biographie">
                            <MudText>@(_userProfile.Biography ?? "Aucune biographie disponible.")</MudText>
                        </MudExpansionPanel>

                        <MudExpansionPanel Text="Centres d'intérêt">
                            @if (_userTags.Any())
                            {
                                <MudChipSet T="string">
                                    @foreach (var tag in _userTags)
                                    {
                                        <MudChip T="string" Color="Color.Primary" Variant="Variant.Outlined">@tag</MudChip>
                                    }
                                </MudChipSet>
                            }
                            else
                            {
                                <MudText Class="text-muted">Aucun tag renseigné.</MudText>
                            }
                        </MudExpansionPanel>

                        <MudExpansionPanel Text="Statistiques">
                            <MudList T="string" Dense="true">
                                <MudListItem T="string">Popularité : @_userProfile.PopularityScore</MudListItem>
                            </MudList>
                        </MudExpansionPanel>

                    </MudExpansionPanels>
                </MudItem>
            </MudGrid>
        </MudPaper>
    }
</MudContainer>

@code {
    [Parameter] public int UserId { get; set; }
    public int currentUserId {get; set;}
    private UserProfileDto? _userProfile;
    private List<string> _photos = new();
    private List<string> _userTags = new();
    private bool _loading = true;
    private bool _hasLiked = false;
    private string _likeButtonLabel => _hasLiked ? "Profil liké" : "Liker ce profil";
    
    // S'assurer que ces listes ne sont jamais null
    private List<Core.Data.Entity.Genre> _genres = new();
    private List<Core.Data.Entity.PrefSex> _prefSexes = new();

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUserIdAsync();
        if (currentUserId == 0)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        _userProfile = await UserService.GetUserProfileAsync(UserId);
        if (_userProfile == null)
        {
            _loading = false;
            return;
        }

        if (currentUserId != UserId)
            await VisitService.RecordVisitAsync(currentUserId, UserId);


        _userTags = await TagService.GetTagNamesForUserAsync(UserId);
        await LoadPhotos();
        _hasLiked = await LikeService.HasLikedAsync(currentUserId, UserId);

        _loading = false;
    }

    private async Task GetCurrentUserIdAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);

            if (userIdClaim != null && int.TryParse(userIdClaim.Value, out var id))
            {
                currentUserId = id;
            }
            else
            {
                Console.WriteLine("ID utilisateur non trouvé ou invalide.");
            }
        }
        else
        {
            Console.WriteLine("Utilisateur non authentifié.");
        }
    }

    private async Task LoadUserProfile()
    {
        _loading = true;

        try
        {
            _userProfile = await UserService.GetUserProfileAsync(UserId);
            _userTags = await TagService.GetTagNamesForUserAsync(UserId);
            if (_userProfile != null)
            {
                await LoadPhotos();
                _hasLiked = await LikeService.HasLikedAsync(currentUserId, UserId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du chargement du profil : {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task LoadPhotos()
    {
        try
        {
            var photos = await PhotoService.GetUserPhotosAsync(UserId);
            _photos = photos
                .Where(p => p.ImageData != null && p.ImageData.Length > 0)
                .Select(p => $"data:image/jpeg;base64,{Convert.ToBase64String(p.ImageData)}")
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur chargement photos : {ex.Message}");
        }
    }

    private async Task ToggleLike()
    {
        try
        {
            if (_hasLiked)
            {
                // L'utilisateur a déjà liké le profil, on l'enlève
                await LikeService.UnlikeProfileAsync(currentUserId, UserId);
                _hasLiked = false;
            }
            else
            {
                // L'utilisateur n'a pas encore liké, on l'ajoute
                await LikeService.LikeProfileAsync(currentUserId, UserId);
                _hasLiked = true;
                if (_userProfile != null)
                {
                    await NotificationService.NotifyProfileLikedAsync(_userProfile.Id, currentUserId);
                }
            }
        }
        catch (Exception ex)
        {
            // Ici tu pourrais gérer les erreurs en affichant un message ou en loggant l'erreur
            Console.WriteLine($"Erreur lors de l'ajout du like : {ex.Message}");
        }
    }

    private string GetGenreLibelle(int? genreId)
    {
        if (genreId == null)
            return "Non spécifié";
            
        // Vérifier si _genres est null avant d'utiliser Any()
        if (_genres == null || _genres.Count == 0)
            return "Non spécifié";
            
        var genre = _genres.FirstOrDefault(g => g.Id == genreId);
        return genre?.Libelle ?? "Non spécifié";
    }
    
    private string GetPrefSexLibelle(int? prefSexId)
    {
        if (prefSexId == null)
            return "Non spécifié";
            
        // Vérifier si _prefSexes est null avant d'utiliser Any()
        if (_prefSexes == null || _prefSexes.Count == 0)
            return "Non spécifié";
            
        var prefSex = _prefSexes.FirstOrDefault(p => p.Id == prefSexId);
        return prefSex?.Libelle ?? "Non spécifié";
    }
}
