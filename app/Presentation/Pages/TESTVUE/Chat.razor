@page "/chat/{ReceiverId:int}"
@using System.Security.Claims
@using Core.Data.Entity
@inject IChatService ChatService
@inject AuthenticationStateProvider AuthStateProvider

<h3>Chat privé</h3>

<div class="mb-3">
    <label for="messageInput">Votre message :</label>
    <input id="messageInput" placeholder="Entrez votre message" @bind="message" class="form-control" @onkeydown="HandleKeyDown" />
</div>
<button class="btn btn-primary" @onclick="SendMessage">Envoyer</button>

<hr />

<ul class="list-unstyled">
    @foreach (var msg in conversationMessages)
    {
        <li>
            <strong>@(msg.SenderId == currentUserId ? "Moi" : "Lui")</strong> : @msg.Contenu
            <span class="text-muted">(@msg.Timestamp.ToString("HH:mm:ss"))</span>
        </li>
    }
</ul>

@code {
    [Parameter]
    public int ReceiverId { get; set; }  // ID de l'utilisateur avec qui discuter

    private int currentUserId;
    private string message = string.Empty;
    private List<Message> conversationMessages = new();

    protected override async Task OnInitializedAsync()
    {
        // Récupérer l'utilisateur connecté et son ID
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
        if (userIdClaim == null || !int.TryParse(userIdClaim.Value, out currentUserId))
        {
            // Vous pouvez afficher un message ou rediriger l'utilisateur non authentifié
            return;
        }

        // Abonnement à l'événement pour recevoir les nouveaux messages
        ChatService.OnMessageReceived += OnMessageReceived;

        // Charger les messages déjà envoyés concernant cette conversation
        conversationMessages = ChatService.Messages
            .Where(m => (m.SenderId == currentUserId && m.ReceiverId == ReceiverId) ||
                        (m.SenderId == ReceiverId && m.ReceiverId == currentUserId))
            .OrderBy(m => m.Timestamp)
            .ToList();
    }

    private void OnMessageReceived(Message newMsg)
    {
        // Filtrer pour n'afficher que les messages appartenant à cette conversation
        if ((newMsg.SenderId == currentUserId && newMsg.ReceiverId == ReceiverId) ||
            (newMsg.SenderId == ReceiverId && newMsg.ReceiverId == currentUserId))
        {
            conversationMessages.Add(newMsg);
            InvokeAsync(StateHasChanged);
        }
    }

    private void SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(message))
        {
            ChatService.SendMessage(currentUserId, ReceiverId, message);
            message = string.Empty;
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SendMessage();
        }
    }
}