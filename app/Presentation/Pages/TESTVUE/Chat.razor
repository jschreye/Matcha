@page "/chat/{ReceiverId:int}"
@using System.Security.Claims
@using Core.Data.Entity
@using Microsoft.AspNetCore.Components.Web
@inject IChatService ChatService
@inject AuthenticationStateProvider AuthStateProvider
@inject INotificationService NotificationService

<MudPaper Class="p-4 mx-auto my-5" Elevation="3" MaxWidth="800px">
    <MudText Typo="Typo.h5">Chat priv√©</MudText>

    <MudDivider Class="my-2" />

    <MudPaper Class="chat-box p-3 mb-4" Elevation="1" Style="max-height: 400px; overflow-y: auto;">
        @if (conversationMessages.Count == 0)
        {
            <MudText Class="text-muted">Aucun message pour le moment.</MudText>
        }
        else
        {
            @foreach (var msg in conversationMessages)
            {
                <MudPaper Class="p-2 my-1" Color="@(msg.SenderId == currentUserId ? Color.Primary : Color.Secondary)" Elevation="0">
                    <MudText Typo="Typo.body2" Class="fw-bold">@((msg.SenderId == currentUserId) ? "Moi" : "Lui")</MudText>
                    <MudText Typo="Typo.body1">@msg.Contenu</MudText>
                    <MudText Typo="Typo.caption" Class="text-muted">(@msg.Timestamp.ToString("HH:mm:ss"))</MudText>
                </MudPaper>
            }
        }
    </MudPaper>

    <MudTextField @bind-Value="message"
                  Placeholder="Entrez votre message..."
                  FullWidth="true"
                  Label="Votre message"
                  Variant="Variant.Outlined"
                  Adornment="Adornment.End"
                  AdornmentIcon="@Icons.Material.Filled.Send"
                  OnAdornmentClick="SendMessage"
                  OnKeyDown="HandleKeyDown" />

    <MudButton Class="mt-2" Color="Color.Primary" Variant="Variant.Filled" OnClick="SendMessage">Envoyer</MudButton>
</MudPaper>

@code {
    [Parameter]
    public int ReceiverId { get; set; }

    private int currentUserId;
    private string message = string.Empty;
    private List<Message> conversationMessages = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
        if (userIdClaim == null || !int.TryParse(userIdClaim.Value, out currentUserId))
        {
            return;
        }

        ChatService.OnMessageReceived += OnMessageReceived;

        conversationMessages = ChatService.Messages
            .Where(m => (m.SenderId == currentUserId && m.ReceiverId == ReceiverId) ||
                        (m.SenderId == ReceiverId && m.ReceiverId == currentUserId))
            .OrderBy(m => m.Timestamp)
            .ToList();
    }

    private void OnMessageReceived(Message newMsg)
    {
        if ((newMsg.SenderId == currentUserId && newMsg.ReceiverId == ReceiverId) ||
            (newMsg.SenderId == ReceiverId && newMsg.ReceiverId == currentUserId))
        {
            conversationMessages.Add(newMsg);
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(message))
        {
            await ChatService.SendMessageAsync(currentUserId, ReceiverId, message);
            await NotificationService.NotifyMessageReceivedAsync(ReceiverId, currentUserId);
            message = string.Empty;
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }
}
<style>
    .chat-box {
        max-height: 400px;
        overflow-y: auto;
    }
</style>