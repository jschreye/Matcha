@page "/search"
@using Core.Interfaces.Services
@using Core.Data.DTOs
@using Core.Data.Entity
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using MudBlazor
@using Presentation.Components.User
@inject IUserService UserService
@inject ISearchService SearchService
@inject IPhotoService PhotoService
@inject ITagService TagService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<style>
    /* Styles pour mobile */
    .mobile-paper {
        box-shadow: none !important;
        border-radius: 0 !important;
    }

    /* Styles pour desktop */
    @@media (min-width: 600px) {
        .mobile-paper {
            box-shadow: var(--mud-elevation-3) !important;
            border-radius: var(--mud-default-borderradius) !important;
        }
        
        .button-container {
            width: 70% !important;
            margin: 0 auto !important;
            flex-direction: row !important;
            justify-content: center !important;
        }
        
        .button-wrapper {
            width: 230px !important;
            margin: 0 !important;
        }
        
        .ou-text {
            margin: 0 20px !important;
            width: auto !important;
        }
        
        .button-custom {
            height: 45px !important;
        }
    }
    
    .button-container {
        width: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-bottom: 16px;
    }
    
    .button-wrapper {
        width: 240px;
        margin: 0 auto;
    }
    
    .ou-text {
        margin: 8px 0;
        width: 100%;
        text-align: center;
    }
    
    .button-custom {
        height: 40px;
    }
</style>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4 px-0 px-sm-4">
    <MudPaper Elevation="0" Class="pa-2 pa-sm-4 mobile-paper">
        <MudText Typo="Typo.h3" Align="Align.Center" Class="mb-4 mb-sm-6 font-weight-bold">Trouve l'âme soeur</MudText>

        <div class="button-container">
            <div class="button-wrapper">
                <MudButton Variant="Variant.Filled" 
                        Color="Color.Secondary" 
                        Size="Size.Small"
                        FullWidth="true"
                        OnClick="SearchSimilarProfiles"
                        Class="py-1 py-sm-2 rounded-lg button-custom"
                        Style="background-color: #a992fa; color: white;">
                    <MudText Typo="Typo.body1" Class="d-block d-sm-none">Notre sélection</MudText>
                    <MudText Typo="Typo.subtitle1" Class="d-none d-sm-block">Notre sélection</MudText>
                </MudButton>
            </div>
            
            <div class="ou-text">
                <MudText Typo="Typo.body1" Class="d-block d-sm-none">ou</MudText>
                <MudText Typo="Typo.subtitle1" Class="d-none d-sm-block">ou</MudText>
            </div>
            
            <div class="button-wrapper">
                <MudButton Variant="Variant.Filled"
                        Color="Color.Primary"
                        Size="Size.Small"
                        FullWidth="true"
                        OnClick="SearchRandomProfiles"
                        Class="py-1 py-sm-2 rounded-lg button-custom"
                        Style="background-color: #8c9eff; color: white;">
                    <MudText Typo="Typo.body1" Class="d-block d-sm-none">Sélection aléatoire</MudText>
                    <MudText Typo="Typo.subtitle1" Class="d-none d-sm-block">Sélection aléatoire</MudText>
                </MudButton>
            </div>
        </div>
        
        <MudText Typo="Typo.body2" Class="my-2 my-sm-4 d-block d-sm-none" Align="Align.Center">
            ou personnaliser
        </MudText>
        <MudText Typo="Typo.body1" Class="my-2 my-sm-4 d-none d-sm-block" Align="Align.Center">
            ou en personnalisant votre recherche
        </MudText>
        
        @if (!IsCustomSearchOpened)
        {
            <MudPaper Class="pa-2 pa-sm-4 mb-4 mb-sm-6" Elevation="0">
                <MudGrid>
                    <!-- Slider pour l'âge -->
                    <MudItem xs="12" sm="4">
                        <MudPaper Elevation="0" Class="d-flex flex-column align-center pa-1 pa-sm-2">
                            <MudText Typo="Typo.caption" Class="mb-1 mb-sm-2">Tranche d'âge</MudText>
                            <div class="d-flex align-center my-1 my-sm-2" style="width: 100%;">
                                <MudSlider T="int" Min="18" Max="99" Value="@MinAge" 
                                         ValueChanged="@((int val) => UpdateAgeFilter(val, true))" 
                                         Color="Color.Secondary" Class="mx-1 mx-sm-2" Style="width: 100%;">
                                </MudSlider>
                                <MudText Typo="Typo.body2" Class="mud-text-secondary ml-1 ml-sm-2">@MinAge</MudText>
                            </div>
                            <div class="d-flex align-center my-1 my-sm-2" style="width: 100%;">
                                <MudSlider T="int" Min="18" Max="99" Value="@MaxAge" 
                                         ValueChanged="@((int val) => UpdateAgeFilter(val, false))" 
                                         Color="Color.Secondary" Class="mx-1 mx-sm-2" Style="width: 100%;">
                                </MudSlider>
                                <MudText Typo="Typo.body2" Class="mud-text-secondary ml-1 ml-sm-2">@MaxAge</MudText>
                            </div>
                        </MudPaper>
                    </MudItem>
                    
                    <!-- Slider pour la popularité -->
                    <MudItem xs="12" sm="4">
                        <MudPaper Elevation="0" Class="d-flex flex-column align-center pa-1 pa-sm-2">
                            <MudText Typo="Typo.caption" Class="mb-1 mb-sm-2">Popularité</MudText>
                            <div class="d-flex align-center my-1 my-sm-2" style="width: 100%;">
                                <MudSlider T="int" Min="0" Max="100" Value="@MinPopularity" 
                                         ValueChanged="@((int val) => UpdatePopularityFilter(val, true))" 
                                         Color="Color.Secondary" Class="mx-1 mx-sm-2" Style="width: 100%;">
                                </MudSlider>
                                <MudText Typo="Typo.body2" Class="mud-text-secondary ml-1 ml-sm-2">@MinPopularity</MudText>
                            </div>
                            <div class="d-flex align-center my-1 my-sm-2" style="width: 100%;">
                                <MudSlider T="int" Min="0" Max="100" Value="@MaxPopularity" 
                                         ValueChanged="@((int val) => UpdatePopularityFilter(val, false))" 
                                         Color="Color.Secondary" Class="mx-1 mx-sm-2" Style="width: 100%;">
                                </MudSlider>
                                <MudText Typo="Typo.body2" Class="mud-text-secondary ml-1 ml-sm-2">@MaxPopularity</MudText>
                            </div>
                        </MudPaper>
                    </MudItem>
                    
                    <!-- Slider pour le rayon de localisation -->
                    <MudItem xs="12" sm="4">
                        <MudPaper Elevation="0" Class="d-flex flex-column align-center pa-1 pa-sm-2">
                            <MudText Typo="Typo.caption" Class="mb-1 mb-sm-2">Rayon de localisation</MudText>
                            <div class="d-flex align-center my-1 my-sm-2" style="width: 100%;">
                                <MudSlider T="double" Min="0" Max="500" Step="10" Value="@MaxDistance" 
                                         ValueChanged="@((double val) => UpdateDistanceFilter(val))" 
                                         Color="Color.Secondary" Class="mx-1 mx-sm-2" Style="width: 100%;">
                                </MudSlider>
                                <MudText Typo="Typo.body2" Class="mud-text-secondary ml-1 ml-sm-2">@MaxDistance km</MudText>
                            </div>
                        </MudPaper>
                    </MudItem>
                </MudGrid>

                <!-- Tags sélectionnés -->
                <MudItem xs="12" Class="d-flex flex-column align-center mt-2 mt-sm-4">
                    <MudText Typo="Typo.caption" Class="mb-1 mb-sm-2">Tags sélectionnés</MudText>
                    <div class="d-flex flex-wrap justify-center">
                        @if (AvailableTags != null && AvailableTags.Any())
                        {
                            @foreach (var tag in AvailableTags)
                            {
                                <MudChip T="string" Color="@(SelectedTagIds.Contains(tag.Id) ? Color.Primary : Color.Default)"
                                        OnClick="@(() => ToggleTag(tag.Id))"
                                        Style="margin: 2px 4px; border-radius: 20px; padding: 6px 12px;">
                                    <div class="d-flex align-center">
                                        @if (SelectedTagIds.Contains(tag.Id))
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.Check" Size="Size.Small" Class="mr-1" />
                                        }
                                        @tag.Libelle
                                    </div>
                                </MudChip>
                            }
                        }
                    </div>
                </MudItem>

                <MudItem xs="12" Class="d-flex justify-center mt-2 mt-sm-4">
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              OnClick="SearchCustomProfiles"
                              Class="px-3 px-sm-6">
                        Rafraîchir les résultats
                    </MudButton>
                </MudItem>
            </MudPaper>
        }

        @if (IsLoading)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
        }

        @if (Users.Any())
        {
            <MudText Typo="Typo.h4" Class="mt-4 mt-sm-6 mb-2 mb-sm-4 font-weight-bold">Résultats</MudText>
            <MudGrid>
                @foreach (var user in Users)
                {
                    <UserCard 
                        User="user" 
                        ProfileImage="@(ProfileImages.ContainsKey(user.Id) ? ProfileImages[user.Id] : string.Empty)" 
                        XsColumns="12" 
                        SmColumns="6" 
                        OnProfileClick="ViewProfile" 
                        CurrentUserId="@CurrentUserId"/>
                }
            </MudGrid>
        }
        else if (!IsLoading && HasSearched)
        {
            <MudAlert Severity="Severity.Info" Class="mt-4">Aucun profil trouvé. Essayez de modifier vos critères de recherche.</MudAlert>
        }
    </MudPaper>
</MudContainer>

@code {
    private List<UserProfileDto> Users { get; set; } = new();
    private bool IsLoading { get; set; } = false;
    private bool HasSearched { get; set; } = false;
    private bool IsCustomSearchOpened { get; set; } = false;
    private int CurrentUserId { get; set; }
    private Dictionary<int, string> ProfileImages { get; set; } = new();
    
    // Paramètres pour la recherche personnalisée
    private int MinAge { get; set; } = 18;
    private int MaxAge { get; set; } = 60;
    private int MinPopularity { get; set; } = 0;
    private int MaxPopularity { get; set; } = 100;
    private double MaxDistance { get; set; } = 100;
    private List<int> SelectedTagIds { get; set; } = new List<int>();
    private List<Tag> AvailableTags { get; set; } = new List<Tag>();

    // Variables pour éviter trop d'appels à l'API
    private System.Timers.Timer? _searchDebounceTimer;
    private bool _isSearchPending = false;
    private int _debounceDelayMs = 500; // 500ms de délai avant déclenchement de la recherche

    protected override async Task OnInitializedAsync()
    {
        // 1) Récupérer l'état d'authentification
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (!(user.Identity?.IsAuthenticated ?? false))
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        // 2) Extraire l'ID
        var claim = user.FindFirst(ClaimTypes.NameIdentifier);
        if (claim == null || !int.TryParse(claim.Value, out int userId))
        {
            NavigationManager.NavigateTo("/login");
            return;
        }
        CurrentUserId = userId;

        // 3) Charger le profil et vérifier profile_complete
        var profile = await UserService.GetUserProfileAsync(CurrentUserId);
        if (profile == null)
        {
            // Pas de profil : on renvoie vers login ou création
            NavigationManager.NavigateTo("/login");
            return;
        }

        if (!profile.ProfileComplete)
        {
            // Profil incomplet → redirection vers la page de profil à compléter
            NavigationManager.NavigateTo($"/profile");
            return;
        }

        // 4) Si on arrive ici, le profil est complet : on poursuit l'initialisation
        await InitializeSearchAsync();
    }
    private async Task InitializeSearchAsync()
    {
        // Votre code existant pour charger les tags, initialiser le timer, etc.
        _searchDebounceTimer = new System.Timers.Timer(_debounceDelayMs);
        _searchDebounceTimer.Elapsed += async (s,e) => await SearchWithDebounce();
        _searchDebounceTimer.AutoReset = false;

        try
        {
            AvailableTags = await TagService.GetTagsAsync();
        }
        catch
        {
            AvailableTags = new List<Tag>();
        }
    }

    private async Task SearchSimilarProfiles()
    {
        IsLoading = true;
        HasSearched = true;
        ProfileImages.Clear();
        
        try
        {
            // Utiliser le service de recherche pour trouver des profils similaires
            var allUsers = await SearchService.FindSimilarProfilesAsync(CurrentUserId);
            
            // Filtrer pour ne garder que les utilisateurs avec un profil complet
            Users = allUsers.Where(u => u.ProfileComplete).ToList();
            
            // Charger les photos de profil pour tous les utilisateurs
            await LoadProfileImagesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la recherche : {ex.Message}");
            Users = new List<UserProfileDto>();
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task SearchRandomProfiles()
    {
        IsLoading = true;
        HasSearched = true;
        ProfileImages.Clear();
        
        try
        {
            // Utiliser le service de recherche pour trouver des profils aléatoires
            var allUsers = await SearchService.FindRandomProfilesAsync(CurrentUserId, 10);
            
            // Filtrer pour ne garder que les utilisateurs avec un profil complet
            Users = allUsers.Where(u => u.ProfileComplete).ToList();
            
            // Charger les photos de profil pour tous les utilisateurs
            await LoadProfileImagesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la recherche aléatoire : {ex.Message}");
            Users = new List<UserProfileDto>();
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task SearchCustomProfiles()
    {
        IsLoading = true;
        HasSearched = true;
        ProfileImages.Clear();
        
        try
        {
            // Utiliser le service de recherche avec les critères personnalisés
            var allUsers = await SearchService.FindCustomProfilesAsync(
                CurrentUserId,
                MinAge,
                MaxAge,
                MinPopularity,
                MaxPopularity,
                MaxDistance,
                SelectedTagIds
            );
            
            // Filtrer pour ne garder que les utilisateurs avec un profil complet
            Users = allUsers.Where(u => u.ProfileComplete).ToList();
            
            // Charger les photos de profil pour tous les utilisateurs
            await LoadProfileImagesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la recherche personnalisée : {ex.Message}");
            Users = new List<UserProfileDto>();
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadProfileImagesAsync()
    {
        foreach (var user in Users)
        {
            try
            {
                var profilePhoto = await PhotoService.GetProfilePhotoAsync(user.Id);
                if (profilePhoto != null && profilePhoto.ImageData != null && profilePhoto.ImageData.Length > 0)
                {
                    // Convertir en base64 pour l'affichage
                    string imageUrl = $"data:image/jpeg;base64,{Convert.ToBase64String(profilePhoto.ImageData)}";
                    ProfileImages[user.Id] = imageUrl;
                }
                else
                {
                    ProfileImages[user.Id] = string.Empty;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur lors du chargement de la photo pour l'utilisateur {user.Id}: {ex.Message}");
                ProfileImages[user.Id] = string.Empty;
            }
        }
        
        // Force une mise à jour de l'UI après chargement des photos
        StateHasChanged();
    }

    private int CalculateStarRating(int popularityScore)
    {
        // Convertir le score de popularité en notation d'étoiles (1-5)
        // Supposons que le score varie de 0 à 100
        return Math.Min(5, Math.Max(1, (int)Math.Ceiling(popularityScore / 20.0)));
    }

    private void UpdateAgeFilter(int value, bool isMin)
    {
        if (isMin)
        {
            MinAge = value;
            if (MinAge > MaxAge)
                MaxAge = MinAge;
        }
        else
        {
            MaxAge = value;
            if (MaxAge < MinAge)
                MinAge = MaxAge;
        }
        
        // Déclencher la recherche avec debounce
        TriggerDebouncedSearch();
    }

    private void UpdatePopularityFilter(int value, bool isMin)
    {
        if (isMin)
        {
            MinPopularity = value;
            if (MinPopularity > MaxPopularity)
                MaxPopularity = MinPopularity;
        }
        else
        {
            MaxPopularity = value;
            if (MaxPopularity < MinPopularity)
                MinPopularity = MaxPopularity;
        }
        
        // Déclencher la recherche avec debounce
        TriggerDebouncedSearch();
    }

    private void UpdateDistanceFilter(double value)
    {
        MaxDistance = value;
        
        // Déclencher la recherche avec debounce
        TriggerDebouncedSearch();
    }

    private void ToggleTag(int tagId)
    {
        if (SelectedTagIds.Contains(tagId))
            SelectedTagIds.Remove(tagId);
        else
            SelectedTagIds.Add(tagId);
            
        // Déclencher la recherche immédiatement après changement de tag
        TriggerDebouncedSearch();
    }

    private void TriggerDebouncedSearch()
    {
        // Réinitialiser le timer à chaque mouvement du curseur
        _searchDebounceTimer?.Stop();
        _searchDebounceTimer?.Start();
        _isSearchPending = true;
    }

    private async Task SearchWithDebounce()
    {
        // Cette méthode est appelée après que le timer a expiré
        if (_isSearchPending)
        {
            _isSearchPending = false;
            
            // Exécution sur le UI thread
            await InvokeAsync(async () => 
            {
                await SearchCustomProfiles();
                StateHasChanged();
            });
        }
    }

    private void ViewProfile(int userId)
    {
        NavigationManager.NavigateTo($"/profile/{userId}");
    }
    
    // Classe pour stocker les paramètres de recherche personnalisée
    public class CustomSearchParameters
    {
        public int MinAge { get; set; }
        public int MaxAge { get; set; }
        public int MinPopularity { get; set; }
        public int MaxPopularity { get; set; }
        public double MaxDistance { get; set; }
        public List<int> SelectedTagIds { get; set; } = new List<int>();
    }

    public void Dispose()
    {
        // Nettoyer le timer lors de la destruction du composant
        _searchDebounceTimer?.Dispose();
    }
} 