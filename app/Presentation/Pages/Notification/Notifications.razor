@page "/notifications"
@using Core.Data.DTOs
@using MudBlazor
@using System.Security.Claims
@inject INotificationService NotificationService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

@implements IDisposable

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-6">
    <MudPaper Class="p-4" Elevation="2">
        <MudStack Spacing="2">
            <!-- En-tÃªte avec compteur et bouton "Tout supprimer" -->
            <MudStack Direction="Row" Align="Center">
                <MudText Typo="Typo.h5" Align="Align.Center">
                    ðŸ”” Mes notifications (@notifications.Count)
                </MudText>
                <MudSpacer />
                <MudButton Variant="Variant.Outlined"
                           Color="Color.Error"
                           StartIcon="@Icons.Material.Filled.DeleteForever"
                           OnClick="ClearAll">
                    Tout supprimer
                </MudButton>
            </MudStack>

            <MudDivider />

            @if (notifications == null || notifications.Count == 0)
            {
                <MudText Class="mt-4" Align="Align.Center" Color="Color.Secondary">
                    â€” Aucune notification pour le moment â€”
                </MudText>
            }
            else
            {
                <MudList T="NotificationDto" Dense="true" Class="mt-2">
                    @foreach (var group in notifications.GroupBy(n => n.TypeLibelle))
                    {
                        <MudListSubheader>@group.Key</MudListSubheader>
                        @foreach (var notif in group.OrderByDescending(n => n.Timestamp))
                        {
                            <MudListItem T="NotificationDto" Class="d-flex justify-space-between">
                                <div>
                                    <b>@notif.TypeLibelle</b> â€“ de @notif.SenderUsername  
                                    <MudText Typo="Typo.caption" Class="ml-2">
                                        @notif.Timestamp.ToString("dd/MM/yyyy HH:mm")
                                    </MudText>
                                </div>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                               Color="Color.Error"
                                               Size="Size.Small"
                                               OnClick="@(() => DeleteOne(notif.Id))" />
                            </MudListItem>
                        }
                    }
                </MudList>
            }
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    private List<NotificationDto> notifications = new();
    private int currentUserId;
    private System.Threading.Timer? _timer;

    protected override async Task OnInitializedAsync()
    {
        // RÃ©cupÃ©rer lâ€™ID courant
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user      = authState.User;
        if (!int.TryParse(user.FindFirstValue(ClaimTypes.NameIdentifier), out currentUserId))
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        // Chargement initial
        await LoadNotifications();

        // Mise en place du polling toutes les 10s
        _timer = new System.Threading.Timer(
            async _ =>
            {
                await LoadNotifications();
                await InvokeAsync(StateHasChanged);
            },
            null,
            dueTime: TimeSpan.FromSeconds(10),
            period:  TimeSpan.FromSeconds(10)
        );
    }

    private async Task LoadNotifications()
    {
        var list = await NotificationService.GetNotificationsForUserAsync(currentUserId);
        notifications = list.OrderByDescending(n => n.Timestamp).ToList();
    }

    private async Task DeleteOne(int id)
    {
        await NotificationService.DeleteNotificationAsync(id, currentUserId);
        await LoadNotifications();
    }

    private async Task ClearAll()
    {
        await NotificationService.ClearAllNotificationsAsync(currentUserId);
        await LoadNotifications();
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}