@page "/notifications"
@using Core.Data.DTOs
@using MudBlazor
@using System.Security.Claims
@inject INotificationService NotificationService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

@implements IDisposable

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-6">
    <MudStack direction="Row"
            align="Center"
            justifyContent="SpaceBetween"
            Class="my-2">
        <MudText Typo="Typo.h5" Class="d-flex align-items-center m-0">
            <MudIcon Icon="@Icons.Material.Filled.Notifications" Class="mr-1" />
            Mes notifications (@notifications.Count)
            <MudIconButton Icon="@Icons.Material.Filled.DeleteForever"
                        Color="Color.Error"
                        OnClick="ClearAll" />
        </MudText>
    </MudStack>

    @if (notifications == null || notifications.Count == 0)
    {
      <MudText  Color="Color.Secondary">— Aucune notification —</MudText>
    }
    else
    {
      @foreach (var group in notifications.GroupBy(n => n.TypeLibelle))
      {
      <MudStack direction="Row" align="Center" justifyContent="SpaceBetween" Class="mt-4 mb-2">
          <MudText Typo="Typo.h6" Class="d-flex align-items-center m-0">@group.Key

          <MudIconButton Icon="@Icons.Material.Filled.Delete"
                        Color="Color.Error"
                        Size="Size.Small"
                        OnClick="@(() => DeleteGroup(group.Key))"/>
          </MudText>
      </MudStack>
        <MudGrid gutterSize="3">
          @foreach (var notif in group.OrderByDescending(n => n.Timestamp))
          {
            <MudItem xs="12">
              <MudPaper Elevation="1" Class="d-flex align-center pa-3">
                <MudIcon Icon="@GetIcon(notif.TypeLibelle)"
                         Size="Size.Large"
                         Color="@GetColor(notif.TypeLibelle)"
                         Class="mr-3" />
                <MudStack Spacing="0">
                    <MudText>
                    @notif.SenderUsername
                    @switch (notif.TypeLibelle)
                    {
                        case "Message":
                        <text> vous a envoyé un message</text>;
                        break;
                        case "Like":
                        <text> vous a liké</text>;
                        break;
                        case "Unlike":
                        <text> n'aime plus votre profil</text>;
                        break;
                        case "Match":
                        <text> vous a matché !</text>;
                        break;
                        case "Visite":
                        <text> a visité votre profil</text>;
                        break;
                        default:
                        <text> @notif.TypeLibelle</text>;
                        break;
                    }
                    </MudText>
                  <MudText Typo="Typo.caption">
                    @notif.Timestamp.ToString("dd/MM/yyyy HH:mm")
                  </MudText>
                </MudStack>
                <MudSpacer />
                @if (notif.TypeLibelle == "Match" || notif.TypeLibelle == "Message")
                {
                  <MudIconButton Icon="@Icons.Material.Filled.Chat"
                                Color="Color.Tertiary"
                                OnClick="@(() => NavigateToChat(notif.SenderId))"
                                Tooltip="Ouvrir le chat"
                                Class="mx-1" />
                }
                <MudIconButton Icon="@Icons.Material.Filled.Person"
                              Color="Color.Primary"
                              OnClick="@(() => NavigateToProfile(notif.SenderId))"
                              Tooltip="Voir le profil"
                              Class="mx-1" />
                
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Color="Color.Error"
                               OnClick="@(() => DeleteOne(notif.Id))"
                               Tooltip="Supprimer"
                               Class="mx-1" />
              </MudPaper>
            </MudItem>
          }
        </MudGrid>
      }
    }
</MudContainer>

@code {
  private List<NotificationDto> notifications = new();
  private int currentUserId;
  private System.Threading.Timer? _timer;

  protected override async Task OnInitializedAsync()
  {
    var authState = await AuthStateProvider.GetAuthenticationStateAsync();
    var user      = authState.User;
    if (!int.TryParse(user.FindFirstValue(ClaimTypes.NameIdentifier), out currentUserId))
    {
      NavigationManager.NavigateTo("/login", forceLoad: true);
      return;
    }

    await LoadNotifications();

    _timer = new System.Threading.Timer(
      async _ =>
      {
        await LoadNotifications();
        await InvokeAsync(StateHasChanged);
      },
      null,
      dueTime: TimeSpan.FromSeconds(10),
      period:  TimeSpan.FromSeconds(10)
    );
  }

  private async Task LoadNotifications()
  {
    var list = await NotificationService.GetNotificationsForUserAsync(currentUserId);
    notifications = list.OrderByDescending(n => n.Timestamp).ToList();
  }

  private async Task DeleteOne(int id)
  {
    await NotificationService.DeleteNotificationAsync(id, currentUserId);
    await LoadNotifications();
  }

  private async Task ClearAll()
  {
    await NotificationService.ClearAllNotificationsAsync(currentUserId);
    await LoadNotifications();
  }

  public void Dispose()
  {
    _timer?.Dispose();
  }

  private string GetIcon(string type)
    => type switch
    {
      "Message" => Icons.Material.Filled.Email,
      "Like"    => Icons.Material.Filled.Favorite,
      "Match"   => Icons.Material.Filled.FavoriteBorder,
      "Visite"   => Icons.Material.Filled.Visibility,
      _         => Icons.Material.Filled.Notifications
    };

  private Color GetColor(string type)
    => type switch
    {
      "Message" => Color.Primary,
      "Like"    => Color.Secondary,
      "Match"   => Color.Info,
      "Visite"   => Color.Tertiary,
      _         => Color.Default
    };

  private void NavigateToProfile(int userId)
  {
    NavigationManager.NavigateTo($"/profile/{userId}");
  }

  private void NavigateToChat(int userId)
  {
    NavigationManager.NavigateTo($"/chat/{userId}");
  }

  private async Task DeleteGroup(string typeLibelle)
  {
      await NotificationService.DeleteNotificationsByTypeAsync(currentUserId, typeLibelle);
      await LoadNotifications();
  }
}