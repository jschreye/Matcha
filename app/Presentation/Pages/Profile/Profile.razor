@page "/profile"
@using Core.Data.DTOs
@using Core.Interfaces.Services
@using System.Security.Claims
@inject IUserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<MudText Typo="Typo.h3">Profil</MudText>

@if (!string.IsNullOrEmpty(message))
{
    <MudAlert Severity="@(operationSuccess ? Severity.Success : Severity.Error)" Elevation="2">
        @message
    </MudAlert>
}

@if (isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (userProfile != null)
{
    <MudForm @ref="form" @bind-IsValid="isFormValid" @bind-Errors="errors" Outlined="true">
        <!-- Prénom -->
        <MudTextField T="string" Label="Prénom" Variant="Variant.Outlined" @bind-Value="userProfile.Firstname" Required="true" RequiredError="Le prénom est requis" />
        
        <!-- Nom -->
        <MudTextField T="string" Label="Nom" Variant="Variant.Outlined" @bind-Value="userProfile.Lastname" Required="true" RequiredError="Le nom est requis" />
        
        <!-- Nom d'utilisateur -->
        <MudTextField T="string" Label="Nom d'utilisateur" Variant="Variant.Outlined" @bind-Value="userProfile.Username" Required="true" RequiredError="Le nom d'utilisateur est requis" />
        
        <!-- Email -->
        <MudTextField T="string" Label="Email" Variant="Variant.Outlined" InputType="InputType.Email" @bind-Value="userProfile.Email" Required="true" RequiredError="L'email est requis" />
        
        <!-- Genre -->
        <MudSelect T="string" Label="Genre" Variant="Variant.Outlined" @bind-Value="userProfile.Gender" Required="true">
            <MudSelectItem Value="@("Male")">Masculin</MudSelectItem>
            <MudSelectItem Value="@("Female")">Féminin</MudSelectItem>
            <MudSelectItem Value="@("Other")">Autre</MudSelectItem>
        </MudSelect>
        
        <!-- Préférences sexuelles -->
        <MudTextField T="string" Label="Préférences sexuelles" Variant="Variant.Outlined" @bind-Value="userProfile.SexualPreferences" />
        
        <!-- Biographie -->
        <MudTextField T="string" Label="Biographie" Variant="Variant.Outlined" Lines="3" @bind-Value="userProfile.Biography" />
        
        <!-- Latitude -->
        <MudNumericField T="double?" Label="Latitude" Variant="Variant.Outlined" @bind-Value="userProfile.Latitude" />
        
        <!-- Longitude -->
        <MudNumericField T="double?" Label="Longitude" Variant="Variant.Outlined" @bind-Value="userProfile.Longitude" />
        
        <!-- Boutons -->
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <MudButton Variant="Variant.Text" Color="Color.Primary" DropShadow="false" OnClick="@(() => form.Validate())">Valider</MudButton>
                <MudButton Variant="Variant.Text" Color="Color.Secondary" DropShadow="false" OnClick="@(() => form.ResetAsync())" Class="mx-2">Réinitialiser</MudButton>
                <MudButton Variant="Variant.Text" DropShadow="false" OnClick="@(() => form.ResetValidation())">Réinitialiser la validation</MudButton>
            </div>
            <div>
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" Disabled="@(!isFormValid)" OnClick="UpdateUserProfile">Enregistrer</MudButton>
            </div>
        </div>
    </MudForm>
}

@code {
    private UserProfileDto? userProfile;
    private string message = string.Empty; // Message d'erreur ou de succès
    private bool operationSuccess;        // Indique le succès ou l'échec de l'opération
    private bool isLoading = true;
    private bool isFormValid;
    private string[] errors = { };
    private MudForm form;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity == null || !user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
        if (userIdClaim == null || !int.TryParse(userIdClaim.Value, out var userId))
        {
            message = "Erreur : utilisateur non authentifié.";
            operationSuccess = false;
            isLoading = false;
            return;
        }

        try
        {
            userProfile = await UserService.GetUserProfileAsync(userId);
        }
        catch (Exception ex)
        {
            message = $"Erreur lors du chargement du profil : {ex.Message}";
            operationSuccess = false;
        }

        isLoading = false;
    }

    private async Task UpdateUserProfile()
    {
        try
        {
            var result = await UserService.UpdateUserProfileAsync(userProfile!);
            if (result)
            {
                message = "Profil mis à jour avec succès.";
                operationSuccess = true;
            }
            else
            {
                message = "Échec de la mise à jour du profil.";
                operationSuccess = false;
            }
        }
        catch (Exception ex)
        {
            message = $"Erreur : {ex.Message}";
            operationSuccess = false;
        }
    }
}