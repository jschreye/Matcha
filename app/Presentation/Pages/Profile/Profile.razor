@page "/profile"
@using Microsoft.AspNetCore.Components.Forms

@inject IJSRuntime JS
@using Core.Data.DTOs
@using Core.Interfaces.Services
@using System.Security.Claims
@using Core.Data.Entity
@inject IUserService UserService
@inject IGenreService GenreService
@inject IPrefSexService PrefSexService
@inject IAlertService AlertService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IValidationService ValidationService

<MudText Typo="Typo.h3">Profil</MudText>

@if (isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (userProfile != null)
{
    <MudForm @ref="form" @bind-IsValid="isFormValid" Outlined="true">
        <!-- Prénom -->
        <MudTextField T="string" Label="Prénom" Variant="Variant.Outlined" @bind-Value="userProfile.Firstname"
                      Required="true" RequiredError="Le prénom est requis" />
        
        <!-- Nom -->
        <MudTextField T="string" Label="Nom" Variant="Variant.Outlined" @bind-Value="userProfile.Lastname"
                      Required="true" RequiredError="Le nom est requis" />
        
        <!-- Nom d'utilisateur -->
        <MudTextField T="string" Label="Nom d'utilisateur" Variant="Variant.Outlined" @bind-Value="userProfile.Username"
                      Required="true" RequiredError="Le nom d'utilisateur est requis" />
        
        <!-- Email -->
        <MudTextField T="string" Label="Email" Variant="Variant.Outlined" InputType="InputType.Email"
                      @bind-Value="userProfile.Email" Required="true" RequiredError="L'email est requis" />
        
        <!-- Genre -->
        <MudSelect T="int?" Label="Genre" Variant="Variant.Outlined" @bind-Value="userProfile.Genre" Required="true">
            @if (genre != null)
            {
                @foreach (var g in genre)
                {
                    <MudSelectItem T="int?" Value="@g.Id">@g.Libelle</MudSelectItem>
                }
            }
        </MudSelect>

        <!-- PrefSex -->
        <MudSelect T="int?" Label="SexualPreferences" Variant="Variant.Outlined"
                   @bind-Value="userProfile.SexualPreferences" Required="true">
            @if (prefSex != null)
            {
                @foreach (var p in prefSex)
                {
                    <MudSelectItem T="int?" Value="@p.Id">@p.Libelle</MudSelectItem>
                }
            }
        </MudSelect>
        
        <!-- Biographie -->
        <MudTextField T="string" Label="Biographie" Variant="Variant.Outlined" Lines="3" @bind-Value="userProfile.Biography" Required="true" />
        
        <!-- Latitude -->
        <MudNumericField T="double?" Label="Latitude" Variant="Variant.Outlined" @bind-Value="userProfile.Latitude" />
        
        <!-- Longitude -->
        <MudNumericField T="double?" Label="Longitude" Variant="Variant.Outlined" @bind-Value="userProfile.Longitude" />
        
        <!-- Boutons -->
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <MudButton Variant="Variant.Text" Color="Color.Primary" DropShadow="false" OnClick="@(() => form.Validate())">
                    Valider
                </MudButton>
                <MudButton Variant="Variant.Text" Color="Color.Secondary" DropShadow="false"
                           OnClick="@(() => form.ResetAsync())" Class="mx-2">
                    Réinitialiser
                </MudButton>
                <MudButton Variant="Variant.Text" DropShadow="false" OnClick="@(() => form.ResetValidation())">
                    Réinitialiser la validation
                </MudButton>
            </div>
            <div>
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" Disabled="@(!isFormValid)" OnClick="@UpdateUserProfile">
                    Enregistrer
                </MudButton>
            </div>
        </div>
    </MudForm>
    <PhotoMultiple />
}
@code {
    
    private UserProfileDto? userProfile;
    private bool isLoading = true;
    private bool isFormValid;
    private MudForm form;
    private List<Genre> genre;
    private List<PrefSex> prefSex;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity == null || !user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
        if (userIdClaim == null || !int.TryParse(userIdClaim.Value, out var userId))
        {
            AlertService.ShowMessage("Erreur : utilisateur non authentifié.", false);
            isLoading = false;
            return;
        }

        try
        {
            userProfile = await UserService.GetUserProfileAsync(userId);
            genre = await GenreService.GetGenresAsync();
            prefSex = await PrefSexService.GetPrefSexAsync();
        }
        catch (Exception ex)
        {
            AlertService.ShowMessage($"Erreur lors du chargement du profil : {ex.Message}", false);
        }

        isLoading = false;
    }

    private async Task UpdateUserProfile()
    {
        // Initialiser une liste pour collecter les erreurs
        var allErrors = new List<string>();

        // Valider le nom d'utilisateur
        var usernameErrors = ValidationService.ValidateUsername(userProfile.Username);
        allErrors.AddRange(usernameErrors);

        // Valider le prénom
        var firstnameErrors = ValidationService.ValidateName(userProfile.Firstname, "Le prénom");
        allErrors.AddRange(firstnameErrors);

        // Valider le nom
        var lastnameErrors = ValidationService.ValidateName(userProfile.Lastname, "Le nom");
        allErrors.AddRange(lastnameErrors);

        // Valider l'email
        var emailErrors = ValidationService.ValidateEmail(userProfile.Email);
        allErrors.AddRange(emailErrors);

        // Valider la latitude et la longitude
        var latitudeErrors = ValidationService.ValidateLatitude(userProfile.Latitude);
        var longitudeErrors = ValidationService.ValidateLongitude(userProfile.Longitude);
        allErrors.AddRange(latitudeErrors);
        allErrors.AddRange(longitudeErrors);

        // (Optionnel) Si vous avez un champ d'image, vous pouvez le valider ici
        // Exemple :
        // var imageErrors = ValidationService.ValidateImage(uploadedImage, 2 * 1024 * 1024); // 2 MB
        // allErrors.AddRange(imageErrors);

        // Vérifier s'il y a des erreurs
        if (allErrors.Any())
        {
            foreach (var error in allErrors)
            {
                AlertService.ShowMessage(error, false);
            }
            return;
        }

        // Si tout est valide, procéder à la mise à jour
        try
        {
            var result = await UserService.UpdateUserProfileAsync(userProfile);
            if (result)
            {
                // On rafraîchit le cookie
                bool refreshOk = await JS.InvokeAsync<bool>("refreshProfileClaim");
                if (refreshOk)
                {
                    // On redirige vers la page d'accueil, en forçant un rechargement complet du navigateur
                    NavigationManager.NavigateTo("/", forceLoad: true);
                    AlertService.ShowMessage("Profil mis à jour.", true);
                }
                else
                {
                    AlertService.ShowMessage("Impossible de rafraîchir le cookie...", false);
                }
            }
            else
            {
                AlertService.ShowMessage("Échec mise à jour du profil.", false);
            }
        }
        catch (Exception ex)
        {
            AlertService.ShowMessage($"Erreur : {ex.Message}", false);
        }
    }
}