@page "/profile"
@using Microsoft.AspNetCore.Components.Forms
@using Core.Data.DTOs
@using Core.Data.Entity
@using Core.Interfaces.Services
@inject IUserService UserService
@inject IPhotoService PhotoService
@inject IAlertService AlertService
@inject IGenreService GenreService
@inject IPrefSexService PrefSexService
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject IValidationService ValidationService
@inject IProfileImageStateService ProfileState

<MudPaper Class="p-4">
    <!-- Gestionnaire de photos de profil -->
    <ProfilePhotoManager UserId="@userId" />

    <MudForm @ref="form" @bind-IsValid="isFormValid" Outlined="true">
        <!-- Informations de base -->
        <BasicInfoForm UserProfile="@userProfile" />

        <!-- Informations complémentaires -->
        <AdditionalInfoForm 
            UserProfile="@userProfile" 
            Genres="@genre" 
            PrefSexes="@prefSex"
            OnLocalisationChanged="@OnLocalisationSwitchChanged" />

        <!-- Boutons d'action -->
        <div class="d-flex justify-content-between align-items-center mt-4">
            <div>
                <MudButton Variant="Variant.Text" Color="Color.Primary" DropShadow="false" 
                        OnClick="@(() => form.Validate())">
                    Valider
                </MudButton>
                <MudButton Variant="Variant.Text" Color="Color.Secondary" DropShadow="false" 
                        OnClick="@(() => form.ResetAsync())" Class="mx-2">
                    Réinitialiser
                </MudButton>
                <MudButton Variant="Variant.Text" DropShadow="false" 
                        OnClick="@(() => form.ResetValidation())">
                    Réinitialiser la validation
                </MudButton>
            </div>
            <div>
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" Disabled="@(!isFormValid)" 
                        OnClick="@UpdateUserProfile">
                    Enregistrer
                </MudButton>
            </div>
        </div>

        <!-- Changement de mot de passe -->
        <PasswordChangeForm UserId="@userId" />
    </MudForm>
</MudPaper>

@code {
    private MudForm form;
    private bool isFormValid;
    private int userId;
    /** Objet contenant les infos du profil utilisateur */
    private UserProfileDto userProfile = new();
    /** Listes des genres et préférences sexuelles */
    private List<Genre> genre;
    private List<PrefSex> prefSex;

    protected override async Task OnInitializedAsync()
    {
        // Récupérer l'utilisateur authentifié
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity == null || !user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }
        userId = int.Parse(user.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier").Value);

        // Charger le profil utilisateur et autres données
        userProfile = await UserService.GetUserProfileAsync(userId);
        genre = await GenreService.GetGenresAsync();
        prefSex = await PrefSexService.GetPrefSexAsync();
    }

    /** Appel dans OnAfterRenderAsync uniquement si le profil est chargé et LocalisationIsActive est true */
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // S'assurer que la valeur de LocalisationIsActive est correcte
            // Cet appel est fait dans OnAfterRenderAsync pour éviter les erreurs de rendu statique
            try
            {
                var serverStatus = await GetCurrentLocalisationStatus();
                if (userProfile.LocalisationIsActive != serverStatus)
                {
                    Console.WriteLine($"Correction de LocalisationIsActive: {userProfile.LocalisationIsActive} -> {serverStatus}");
                    userProfile.LocalisationIsActive = serverStatus;
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur lors de l'initialisation du statut de localisation: {ex.Message}");
            }
        }
    }

    /** Met à jour le profil utilisateur */
    private async Task UpdateUserProfile()
    {
        // Log pour déboguer
        Console.WriteLine($"Début UpdateUserProfile - LocalisationIsActive: {userProfile.LocalisationIsActive}");
        
        var allErrors = new List<string>();
        allErrors.AddRange(ValidationService.ValidateUsername(userProfile.Username));
        allErrors.AddRange(ValidationService.ValidateName(userProfile.Firstname, "Le prénom"));
        allErrors.AddRange(ValidationService.ValidateName(userProfile.Lastname, "Le nom"));
        allErrors.AddRange(ValidationService.ValidateEmail(userProfile.Email));
        allErrors.AddRange(ValidationService.ValidateLatitude(userProfile.Latitude));
        allErrors.AddRange(ValidationService.ValidateLongitude(userProfile.Longitude));
        allErrors.AddRange(ValidationService.ValidateBiography(userProfile.Biography));
        
        if (allErrors.Any())
        {
            foreach (var error in allErrors)
                AlertService.ShowMessage(error, false);
            return;
        }

        // Si le statut de localisation a changé, mettre à jour les coordonnées
        bool localisationStatusChanged = userProfile.LocalisationIsActive != await GetCurrentLocalisationStatus();
        Console.WriteLine($"LocalisationStatusChanged: {localisationStatusChanged}, Nouvelle valeur: {userProfile.LocalisationIsActive}");
        
        if (localisationStatusChanged)
        {
            if (userProfile.LocalisationIsActive)
            {
                // Si l'utilisateur active la géolocalisation, demander sa position
                try {
                    var position = await JS.InvokeAsync<Geolocation>("getUserLocation");
                    userProfile.Latitude = position.Latitude;
                    userProfile.Longitude = position.Longitude;
                    Console.WriteLine($"Position obtenue: {position.Latitude}, {position.Longitude}");
                } catch (Exception ex) {
                    Console.WriteLine($"Erreur lors de la géolocalisation: {ex.Message}");
                    // En cas d'erreur, utiliser la localisation alternative
                    var fallback = await JS.InvokeAsync<Geolocation>("getFallbackLocation");
                    userProfile.Latitude = fallback.Latitude;
                    userProfile.Longitude = fallback.Longitude;
                    Console.WriteLine($"Position alternative: {fallback.Latitude}, {fallback.Longitude}");
                }
            }
            else
            {
                // Si l'utilisateur désactive la géolocalisation, utiliser la localisation alternative
                var fallback = await JS.InvokeAsync<Geolocation>("getFallbackLocation");
                userProfile.Latitude = fallback.Latitude;
                userProfile.Longitude = fallback.Longitude;
                Console.WriteLine($"Position alternative (désactivation): {fallback.Latitude}, {fallback.Longitude}");
            }
        }

        // Mettre à jour le profil utilisateur (y compris le statut de géolocalisation)
        Console.WriteLine($"Avant UpdateUserProfileAsync - LocalisationIsActive: {userProfile.LocalisationIsActive}");
        var result = await UserService.UpdateUserProfileAsync(userProfile);
        Console.WriteLine($"Résultat UpdateUserProfileAsync: {result}");
        
        // Afficher un message de confirmation ou d'erreur
        if (result)
        {
            // Mettre à jour également la localisation pour s'assurer que le statut est bien enregistré
            await UserService.UpdateLocationAsync(userProfile.Id, userProfile.Latitude.Value, userProfile.Longitude.Value, userProfile.LocalisationIsActive);
            Console.WriteLine($"UpdateLocationAsync appelé avec LocalisationIsActive: {userProfile.LocalisationIsActive}");
            
            bool refreshOk = await JS.InvokeAsync<bool>("refreshProfileClaim");
            Console.WriteLine($"RefreshProfileClaim: {refreshOk}");
            
            if (refreshOk)
            {
                NavigationManager.NavigateTo("/", forceLoad: true);
                AlertService.ShowMessage("Profil mis à jour.", true);
            }
            else
            {
                AlertService.ShowMessage("Impossible de rafraîchir le cookie...", false);
            }
        }
        else
        {
            AlertService.ShowMessage("Échec de la mise à jour du profil.", false);
        }
    }

    /** Récupère le statut actuel de la localisation depuis le serveur */
    private async Task<bool> GetCurrentLocalisationStatus()
    {
        try
        {
            // Utiliser la fonction JavaScript nommée
            var userInfoJson = await JS.InvokeAsync<string>("getUserLocalisationStatus");
            
            // Désérialiser manuellement la réponse JSON
            var options = new System.Text.Json.JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };
            
            var userInfo = System.Text.Json.JsonSerializer.Deserialize<UserInfoDto>(userInfoJson, options);
            
            Console.WriteLine($"GetCurrentLocalisationStatus - userInfo.localisationIsActive: {userInfo.LocalisationIsActive}");
            return userInfo.LocalisationIsActive;
        }
        catch (Exception ex)
        {
            // En cas d'erreur, retourner la valeur actuelle
            Console.WriteLine($"Erreur dans GetCurrentLocalisationStatus: {ex.Message}");
            return userProfile.LocalisationIsActive;
        }
    }

    private void OnLocalisationSwitchChanged(bool value)
    {
        // Log le changement de valeur
        Console.WriteLine($"LocalisationIsActive changed to: {value}");
    }

    /** Structure pour récupérer les coordonnées depuis JS */
    public class Geolocation
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }

    // Classe pour désérialiser la réponse JSON
    private class UserInfoDto
    {
        public int Id { get; set; }
        public string Username { get; set; }
        public bool ProfileComplete { get; set; }
        public bool LocalisationIsActive { get; set; }
    }
}