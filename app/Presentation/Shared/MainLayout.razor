@inherits LayoutComponentBase
@using MudBlazor

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />

<style>
    @@media (max-width: 599px) {
        .mud-drawer-overlay {
            background-color: rgba(0, 0, 0, 0.5) !important;
        }
    }
</style>

<MudLayout id="unique_id_scroll_section" Style="height: 100vh; overflow-y: auto;">
    <!-- AppBar en haut de l'application -->
    <UserMenu ShowLogin="true" ShowRegister="true" OnToggleDrawer="ToggleDrawer" />

    <!-- Drawer latéral pour la navigation -->
    <MudDrawer @bind-Open="_drawerOpen" 
               Elevation="2" 
               Variant="DrawerVariant.Temporary" 
               ClipMode="DrawerClipMode.Never" 
               Style="@($"color:{Colors.Gray.Lighten5}; background:{Colors.DeepPurple.Accent3};")">
        <NavMenu />
    </MudDrawer>

    <!-- Contenu principal de l'application -->
    <MudMainContent Class="pt-16 px-4">
        <MudContainer Class="mt-6">
            @Body
            <!-- Affichage des alertes -->
            @if (!string.IsNullOrEmpty(_message))
            {
                <div class="alert-container @(isVisible ? "alert-slide-in" : "alert-slide-out")">
                    <MudAlert class="mt-5" Severity="@(isSuccess ? Severity.Success : Severity.Error)" Elevation="2" Dense="true">
                        @_message
                    </MudAlert>
                </div>
            }
            <MudScrollToTop TopOffset="100"
                            Selector="#unique_id_scroll_section"
                            VisibleCssClass="visible fixed bottom-4 right-4"
                            HiddenCssClass="invisible">
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowUpward" Style="@($"color:{Colors.DeepPurple.Lighten5}; background:{Colors.DeepPurple.Accent3};")">
                    Go to top
                </MudButton>
            </MudScrollToTop>
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen = false;
    private string _message = string.Empty;
    private bool isSuccess;
    private bool isVisible = false;
    private CancellationTokenSource _cancellationTokenSource = new();

    [Inject] private Core.Interfaces.Services.IAlertService AlertService { get; set; } = default!;

    protected override void OnInitialized()
    {
        AlertService.OnMessageChanged += HandleAlertMessage;
    }

    private void HandleAlertMessage(string message, bool success)
    {
        // Annule tout délai en cours avant de gérer le nouveau message
        _cancellationTokenSource?.Cancel();
        _cancellationTokenSource = new CancellationTokenSource();

        _message = message;
        isSuccess = success;
        isVisible = true;

        InvokeAsync(StateHasChanged);

        // Effacer l'alerte après un délai, sauf si un nouveau message arrive
        Task.Delay(5000, _cancellationTokenSource.Token).ContinueWith(task =>
        {
            if (!task.IsCanceled)
            {
                isVisible = false;
                InvokeAsync(StateHasChanged);

                // Effacer complètement après l'animation de disparition
                Task.Delay(500, _cancellationTokenSource.Token).ContinueWith(_ =>
                {
                    if (!_cancellationTokenSource.Token.IsCancellationRequested)
                    {
                        _message = string.Empty;
                        InvokeAsync(StateHasChanged);
                    }
                });
            }
        });
    }

    private void CloseAlert()
    {
        _cancellationTokenSource?.Cancel(); // Annule tout délai en cours
        isVisible = false;

        InvokeAsync(StateHasChanged);

        Task.Delay(500).ContinueWith(_ =>
        {
            _message = string.Empty;
            InvokeAsync(StateHasChanged);
        });
    }

    public void Dispose()
    {
        AlertService.OnMessageChanged -= HandleAlertMessage;
        _cancellationTokenSource?.Dispose(); // Nettoyage des ressources
    }

    private void ToggleDrawer()
    {
        _drawerOpen = !_drawerOpen;
    }
}