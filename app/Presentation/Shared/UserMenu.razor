@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IPhotoService PhotoService
@inject IProfileImageStateService ProfileState

<MudAppBar Elevation="1" Style="@($"background:{Colors.Gray.Lighten3};")">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Edge="Edge.Start" OnClick="@ToggleDrawerAsync" Style="@($"color:{Colors.DeepPurple.Accent4};")"/>
    <MudSpacer />
    <AuthorizeView>
        <Authorized>
            <MudMenu>
                <ActivatorContent>
                    <MudBadge Class="mr-3" Color="Color.Success" Overlap="true" Bordered="true">
                        @if (!string.IsNullOrWhiteSpace(ProfileState.ProfileImageSrc))
                        {
                            <!-- Affiche l'image de profil synchronisée -->
                            <img src="@ProfileState.ProfileImageSrc" alt="Profile" style="width:48px; height:48px; border-radius:50%;" />
                        }
                        else
                        {
                            <!-- Affiche le SVG par défaut -->
                            <MudAvatar Size="Size.Medium">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icon-tabler-user">
                                    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                    <circle cx="12" cy="7" r="4"/>
                                    <path d="M6 21v-2a4 4 0 0 1 4-4h4a4 4 0 0 1 4 4v2"/>
                                </svg>
                            </MudAvatar>
                        }
                    </MudBadge>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem Href="/profile">
                        <MudIcon Icon="@Icons.Material.Filled.People" Class="mr-5" Style="@($"color:{Colors.DeepPurple.Accent4};")" />
                        Profile
                    </MudMenuItem>
                    <MudMenuItem OnClick="Logout">
                        <MudIcon Icon="@Icons.Material.Filled.Logout" Class="mr-5" Style="@($"color:{Colors.DeepPurple.Accent4};")" />
                        Logout
                    </MudMenuItem>
                </ChildContent>
            </MudMenu>
        </Authorized>
        <NotAuthorized>
            <!-- Boutons Login et Register pour les utilisateurs non authentifiés -->
            @if (ShowLogin)
            {
                <MudButton OnClick="@NavigateToLogin" Style="@($"color:{Colors.DeepPurple.Accent4};")">
                    <div>
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icon-tabler-login-2">
                            <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                            <path d="M9 8v-2a2 2 0 0 1 2-2h7a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-7a2 2 0 0 1-2-2v-2"/>
                            <path d="M3 12h13l-3-3"/>
                            <path d="M13 15l3-3"/>
                        </svg>
                        <MudText Style="font-size: small;" Class="ml-2">Login</MudText>
                    </div>
                </MudButton>
            }
            @if (ShowRegister)
            {
                <MudButton OnClick="@NavigateToRegister" Class="mx-1" Style="@($"color:{Colors.DeepPurple.Accent4};")">
                    <div>
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icon-tabler-user-plus">
                            <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                            <path d="M8 7a4 4 0 1 0 8 0a4 4 0 0 0-8 0"/>
                            <path d="M16 19h6"/>
                            <path d="M19 16v6"/>
                            <path d="M6 21v-2a4 4 0 0 1 4-4h4"/>
                        </svg>
                        <MudText Style="font-size: small;" Class="ml-2">Register</MudText>
                    </div>
                </MudButton>
            }
        </NotAuthorized>
    </AuthorizeView>
</MudAppBar>

@code {
    [Parameter]
    public bool ShowLogin { get; set; } = true;

    [Parameter]
    public bool ShowRegister { get; set; } = true;

    [Parameter]
    public EventCallback OnToggleDrawer { get; set; }

    private Action _onProfileImageChanged;

    private bool isAuthenticated;
    private bool isOnLoginPage;
    private bool isOnRegisterPage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

        // Abonnement avec InvokeAsync pour s'assurer que StateHasChanged est appelé sur le bon Dispatcher
        _onProfileImageChanged = () => InvokeAsync(StateHasChanged);
        ProfileState.OnChange += _onProfileImageChanged;

        UpdateCurrentPage();
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    public void Dispose()
    {
        ProfileState.OnChange -= _onProfileImageChanged;
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private void OnLocationChanged(object sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        UpdateCurrentPage();
        InvokeAsync(StateHasChanged);
    }

    private void UpdateCurrentPage()
    {
        var currentUri = NavigationManager.Uri.ToLower();
        isOnLoginPage = currentUri.EndsWith("/login");
        isOnRegisterPage = currentUri.EndsWith("/register");
    }

    private void NavigateToLogin() => NavigationManager.NavigateTo("/login");

    private void NavigateToRegister() => NavigationManager.NavigateTo("/register");

    private void Logout() => NavigationManager.NavigateTo("/logout", true);

    private async Task ToggleDrawerAsync()
    {
        if (OnToggleDrawer.HasDelegate)
        {
            await OnToggleDrawer.InvokeAsync(null);
        }
    }
}